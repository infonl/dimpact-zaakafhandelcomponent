name: Strict Lint New Code

on:
  pull_request:
    branches: [main, develop]
    paths:
      - "src/main/app/**/*.ts"
      - "src/main/app/**/*.js"
      - "src/main/app/**/*.html"

jobs:
  strict-lint-new-code:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: src/main/app/package-lock.json

      - name: Install dependencies
        working-directory: src/main/app
        run: npm ci

      - name: Get new and modified files
        id: changed-files
        run: |
          # Get list of changed files compared to base branch
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -E '\.(ts|js|html)$' | grep '^src/main/app/' || true)

          # Filter out deleted files (files that exist in the diff but not in the current working directory)
          EXISTING_FILES=""
          for file in $CHANGED_FILES; do
            if [ -f "$file" ]; then
              EXISTING_FILES="$EXISTING_FILES$file"$'\n'
            else
              echo "⚠️  Skipping deleted file: $file"
            fi
          done

          # Filter out test files and other non-source files
          FILTERED_FILES=$(echo "$EXISTING_FILES" | grep -v '\.spec\.' | grep -v '\.test\.' | grep -v 'test-helpers' || true)

          # Separate new files (added) from modified files, but only include existing files
          NEW_FILES=""
          MODIFIED_FILES=""

          for file in $(git diff --name-only --diff-filter=A origin/${{ github.base_ref }}...HEAD | grep -E '\.(ts|js|html)$' | grep '^src/main/app/' | grep -v '\.spec\.' | grep -v '\.test\.' | grep -v 'test-helpers' || true); do
            if [ -f "$file" ]; then
              NEW_FILES="$NEW_FILES$file"$'\n'
            fi
          done

          for file in $(git diff --name-only --diff-filter=M origin/${{ github.base_ref }}...HEAD | grep -E '\.(ts|js|html)$' | grep '^src/main/app/' | grep -v '\.spec\.' | grep -v '\.test\.' | grep -v 'test-helpers' || true); do
            if [ -f "$file" ]; then
              MODIFIED_FILES="$MODIFIED_FILES$file"$'\n'
            fi
          done

          if [ -n "$FILTERED_FILES" ]; then
            echo "Changed files to check:"
            echo "$FILTERED_FILES"
            echo "files_to_check<<EOF" >> $GITHUB_OUTPUT
            echo "$FILTERED_FILES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            
            if [ -n "$NEW_FILES" ]; then
              echo "New files (strict checking required):"
              echo "$NEW_FILES"
              echo "new_files<<EOF" >> $GITHUB_OUTPUT
              echo "$NEW_FILES" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
            fi
            
            if [ -n "$MODIFIED_FILES" ]; then
              echo "Modified files (incremental strict checking):"
              echo "$MODIFIED_FILES"
              echo "modified_files<<EOF" >> $GITHUB_OUTPUT
              echo "$MODIFIED_FILES" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
            fi
          else
            echo "No relevant files changed"
            echo "files_to_check=" >> $GITHUB_OUTPUT
            echo "new_files=" >> $GITHUB_OUTPUT
            echo "modified_files=" >> $GITHUB_OUTPUT
          fi

      - name: Strict ESLint check on new files
        if: steps.changed-files.outputs.new_files != ''
        working-directory: src/main/app
        run: |
          # Create a stricter ESLint config for new files
          cat > .eslintrc.strict.js << 'EOF'
          module.exports = {
            root: true,
            ignorePatterns: ["dist", "coverage"],
            parserOptions: {
              ecmaVersion: 2020,
            },
            overrides: [
              {
                files: ["*.ts"],
                parserOptions: {
                  project: "tsconfig.json",
                  tsconfigRootDir: __dirname,
                  sourceType: "module",
                },
                extends: [
                  "eslint:recommended",
                  "plugin:@typescript-eslint/recommended",
                  "plugin:@angular-eslint/recommended",
                  "plugin:@typescript-eslint/recommended-requiring-type-checking",
                ],
                rules: {
                  "@angular-eslint/component-class-suffix": [
                    "off",
                    {
                      suffixes: ["Component", "Page", "Dialog"],
                    },
                  ],
                  "@angular-eslint/use-lifecycle-interface": "error",
                  "@typescript-eslint/no-explicit-any": "error",
                  "@typescript-eslint/explicit-function-return-type": "warn",
                  "@typescript-eslint/no-unused-vars": "error",
                  "@typescript-eslint/prefer-nullish-coalescing": "error",
                  "@typescript-eslint/prefer-optional-chain": "error",
                },
              },
              {
                files: ["*.html"],
                extends: [
                  "plugin:@angular-eslint/template/recommended",
                  "plugin:@angular-eslint/template/accessibility",
                  "plugin:prettier/recommended",
                ],
              },
            ],
          };
          EOF

          NEW_FILES="${{ steps.changed-files.outputs.new_files }}"

          # Convert file paths to be relative to the app directory
          RELATIVE_NEW_FILES=$(echo "$NEW_FILES" | sed 's|^src/main/app/||')

          echo "Running strict ESLint on new files..."
          echo "Files to lint (relative to app directory):"
          echo "$RELATIVE_NEW_FILES"
          npx eslint $RELATIVE_NEW_FILES --no-config-lookup --config .eslintrc.strict.js

      - name: Strict TypeScript check on new files
        if: steps.changed-files.outputs.new_files != ''
        working-directory: src/main/app
        run: |
          # Create a strict tsconfig for new files only
          cat > tsconfig.strict-new.json << 'EOF'
          {
            "extends": "./tsconfig.json",
            "compilerOptions": {
              "strict": true,
              "noEmit": true,
              "skipLibCheck": true,
              "noImplicitAny": true,
              "noImplicitReturns": true,
              "noImplicitThis": true,
              "noUnusedLocals": true,
              "noUnusedParameters": true,
              "exactOptionalPropertyTypes": true,
              "noUncheckedIndexedAccess": true
            },
            "angularCompilerOptions": {
              "strictTemplates": true,
              "strictInjectionParameters": true,
              "strictInputAccessModifiers": true
            },
            "include": [],
            "exclude": ["src/test-helpers.ts", "src/**/*.spec.ts", "src/**/*.test.ts"]
          }
          EOF

          # Add new files to the include array
          NEW_FILES="${{ steps.changed-files.outputs.new_files }}"
          if [ -n "$NEW_FILES" ]; then
            # Convert file paths to be relative to the app directory
            RELATIVE_NEW_FILES=$(echo "$NEW_FILES" | sed 's|^src/main/app/||')
            
            # Convert to JSON array format
            FILES_JSON=$(echo "$RELATIVE_NEW_FILES" | jq -R -s -c 'split("\n")[:-1]')
            
            # Update tsconfig to include only new files
            jq --argjson files "$FILES_JSON" '.include = $files' tsconfig.strict-new.json > tsconfig.strict-new.tmp.json
            mv tsconfig.strict-new.tmp.json tsconfig.strict-new.json
            
            echo "Running strict TypeScript check on new files..."
            npx tsc --project tsconfig.strict-new.json
          fi

      - name: Incremental strict check on modified files
        if: steps.changed-files.outputs.modified_files != ''
        working-directory: src/main/app
        run: |
          # For modified files, we'll check only the changed lines with a more lenient approach
          MODIFIED_FILES="${{ steps.changed-files.outputs.modified_files }}"

          echo "Running incremental strict check on modified files..."

          # Create a moderately strict config for modified files
          cat > tsconfig.incremental.json << 'EOF'
          {
            "extends": "./tsconfig.json",
            "compilerOptions": {
              "strict": true,
              "noEmit": true,
              "skipLibCheck": true,
              "noImplicitAny": true,
              "noImplicitReturns": true,
              "noImplicitThis": true
            },
            "angularCompilerOptions": {
              "strictTemplates": true,
              "strictInjectionParameters": true
            },
            "include": [],
            "exclude": ["src/test-helpers.ts", "src/**/*.spec.ts", "src/**/*.test.ts"]
          }
          EOF

          # Add modified files to the include array
          if [ -n "$MODIFIED_FILES" ]; then
            # Convert file paths to be relative to the app directory
            RELATIVE_MODIFIED_FILES=$(echo "$MODIFIED_FILES" | sed 's|^src/main/app/||')
            
            # Convert to JSON array format
            FILES_JSON=$(echo "$RELATIVE_MODIFIED_FILES" | jq -R -s -c 'split("\n")[:-1]')
            
            # Update tsconfig to include only modified files
            jq --argjson files "$FILES_JSON" '.include = $files' tsconfig.incremental.json > tsconfig.incremental.tmp.json
            mv tsconfig.incremental.tmp.json tsconfig.incremental.json
            
            echo "Running incremental TypeScript check on modified files..."
            npx tsc --project tsconfig.incremental.json
          fi

      - name: Comment on PR if strict check failed
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const newFiles = '${{ steps.changed-files.outputs.new_files }}';
            const modifiedFiles = '${{ steps.changed-files.outputs.modified_files }}';

            let body = `❌ **Strict linting check failed**

            The strict linting check for new/modified code has failed. Please fix the issues:`;

            if (newFiles) {
              body += `
              
              **New files** (require strict TypeScript compliance):
              - ${newFiles.split('\n').filter(f => f).map(f => `\`${f}\``).join('\n- ')}`;
            }

            if (modifiedFiles) {
              body += `
              
              **Modified files** (incremental strict checking):
              - ${modifiedFiles.split('\n').filter(f => f).map(f => `\`${f}\``).join('\n- ')}`;
            }

            body += `

            **To fix locally:**
            1. For new files, ensure they follow strict TypeScript standards
            2. For modified files, fix any new strict mode violations
            3. Run: \`cd src/main/app && npm run lint\`
            4. Consider temporarily enabling strict mode in \`tsconfig.app.json\` to see all issues`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            })
