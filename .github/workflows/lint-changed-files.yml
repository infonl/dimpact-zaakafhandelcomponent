name: Lint Changed Files

on:
  pull_request:
    branches: [main, develop]
    paths:
      - "src/main/app/**/*.ts"
      - "src/main/app/**/*.js"
      - "src/main/app/**/*.html"
      - "src/main/app/**/*.json"
      - "src/main/app/.eslintrc.js"
      - "src/main/app/tsconfig*.json"
      - "src/main/app/angular.json"

jobs:
  lint-changed-files:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history to compare with base branch

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: src/main/app/package-lock.json

      - name: Install dependencies
        working-directory: src/main/app
        run: npm ci

      - name: Get changed files
        id: changed-files
        run: |
          # Get list of changed files compared to base branch
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -E '\.(ts|js|html)$' | grep '^src/main/app/' || true)

          # Filter out deleted files (files that exist in the diff but not in the current working directory)
          EXISTING_FILES=""
          for file in $CHANGED_FILES; do
            if [ -f "$file" ]; then
              EXISTING_FILES="$EXISTING_FILES$file"$'\n'
            else
              echo "⚠️  Skipping deleted file: $file"
            fi
          done

          # Filter out test files and other non-source files
          FILTERED_FILES=$(echo "$EXISTING_FILES" | grep -v '\.spec\.' | grep -v '\.test\.' | grep -v 'test-helpers' || true)

          if [ -n "$FILTERED_FILES" ]; then
            echo "Changed files to lint:"
            echo "$FILTERED_FILES"
            echo "files_to_lint<<EOF" >> $GITHUB_OUTPUT
            echo "$FILTERED_FILES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "No relevant files changed"
            echo "files_to_lint=" >> $GITHUB_OUTPUT
          fi

      - name: Lint changed files
        if: steps.changed-files.outputs.files_to_lint != ''
        working-directory: src/main/app
        run: |
          # Convert the files list to space-separated for eslint
          FILES_TO_LINT="${{ steps.changed-files.outputs.files_to_lint }}"

          # Convert file paths to be relative to the app directory
          RELATIVE_FILES=$(echo "$FILES_TO_LINT" | sed 's|^src/main/app/||')

          # Run ESLint on changed files
          echo "Running ESLint on changed files..."
          echo "Files to lint (relative to app directory):"
          echo "$RELATIVE_FILES"
                      npx eslint $RELATIVE_FILES --no-config-lookup --config .eslintrc.js

      - name: Type check changed files
        if: steps.changed-files.outputs.files_to_lint != ''
        working-directory: src/main/app
        run: |
          # Create a temporary tsconfig for strict checking of changed files only
          cat > tsconfig.strict-check.json << 'EOF'
          {
            "extends": "./tsconfig.json",
            "compilerOptions": {
              "strict": true,
              "noEmit": true,
              "skipLibCheck": true
            },
            "angularCompilerOptions": {
              "strictTemplates": true,
              "strictInjectionParameters": true
            },
            "include": [],
            "exclude": ["src/test-helpers.ts", "src/**/*.spec.ts", "src/**/*.test.ts"]
          }
          EOF

          # Add changed files to the include array
          FILES_TO_CHECK="${{ steps.changed-files.outputs.files_to_lint }}"
          if [ -n "$FILES_TO_CHECK" ]; then
            # Convert file paths to be relative to the app directory
            RELATIVE_FILES=$(echo "$FILES_TO_CHECK" | sed 's|^src/main/app/||')
            
            # Convert to JSON array format
            FILES_JSON=$(echo "$RELATIVE_FILES" | jq -R -s -c 'split("\n")[:-1]')
            
            # Update tsconfig to include only changed files
            jq --argjson files "$FILES_JSON" '.include = $files' tsconfig.strict-check.json > tsconfig.strict-check.tmp.json
            mv tsconfig.strict-check.tmp.json tsconfig.strict-check.json
            
            echo "Running TypeScript strict check on changed files..."
            npx tsc --project tsconfig.strict-check.json
          fi

      - name: Comment on PR if linting failed
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `❌ **Linting check failed**
              
              The linting check for changed files has failed. Please fix the linting errors in your newly added or modified code.
              
              You can run the following commands locally to check for issues:
              \`\`\`bash
              cd src/main/app
              npm run lint
              \`\`\`
              
              For TypeScript strict checking, you can temporarily enable strict mode in \`tsconfig.app.json\` to see all issues.`
            })
