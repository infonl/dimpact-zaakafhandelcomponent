#
# SPDX-FileCopyrightText: 2023 Lifely
# SPDX-License-Identifier: EUPL-1.2+
#
name: Build, test & deploy

on:
  pull_request:
  workflow_dispatch:
  push:
    branches:
      - main

# cancel any previous runs of this workflow for this branch that are still in progress
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  JAVA_VERSION: '17'
  CONTAINER_REGISTRY_URL: 'ghcr.io/infonl'
  APPLICATION_NAME: 'zaakafhandelcomponent'

permissions:
  contents: write
  packages: write
  checks: write
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      READ_PACKAGES_USERNAME: $${{ vars.READ_PACKAGES_USERNAME }}
      READ_PACKAGES_TOKEN: ${{ secrets.READ_PACKAGES_TOKEN }}
    outputs:
      branch_name: ${{ steps.gen_branch_name.outputs.BRANCH_NAME }}
      build_number: ${{ steps.gen_build_number.outputs.BUILD_NUMBER }}
      zac_docker_image: ${{ steps.gen_tag.outputs.ZAC_DOCKER_IMAGE }}
    steps:
      - uses: actions/checkout@v4

      - name: Set branch name
        id: gen_branch_name
        run: echo "BRANCH_NAME=${{ github.ref_name }}" | sed 's/\//_/g; s/(//g; s/)//g' >> $GITHUB_OUTPUT

      - name: Set build number
        id: gen_build_number
        run: echo "BUILD_NUMBER=${{ steps.gen_branch_name.outputs.BRANCH_NAME }}-${{ github.run_number }}" >> $GITHUB_OUTPUT

      - name: Set Docker image tag
        id: gen_tag
        run: echo "ZAC_DOCKER_IMAGE=${{ env.CONTAINER_REGISTRY_URL }}/${{ env.APPLICATION_NAME }}:${{ steps.gen_build_number.outputs.BUILD_NUMBER }}" >> $GITHUB_OUTPUT

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          # Use the Maven cache here so that Maven artefacts (Maven build is triggered from the Gradle build) are cached.
          cache: 'maven'

      # To set up the Gradle build itself we use the 'gradle-build-action' which caches Gradle artefacts by default.
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      # The Gradle build also executes a Maven command to build the WildFly bootable JAR.
      - name: Gradle build
        run: ./gradlew build -x test --info

      - name: Cache Gradle build artefacts
        uses: actions/cache/save@v3
        with:
          path: |
            build/
          key: build-${{ github.repository }}-${{ github.ref_name }}-${{ github.run_number }}

      - name: Cache generated Java clients
        uses: actions/cache/save@v3
        with:
          path: |
            src/generated/java
          key: generated-java-clients-${{ github.repository }}-${{ github.ref_name }}-${{ github.run_number }}

      - name: Cache Maven build artefacts
        uses: actions/cache/save@v3
        with:
          path: |
            target/
          key: maven-build-${{ github.repository }}-${{ github.ref_name }}-${{ github.run_number }}

  run-unit-tests:
    needs: [build]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      READ_PACKAGES_USERNAME: $${{ vars.READ_PACKAGES_USERNAME }}
      READ_PACKAGES_TOKEN: ${{ secrets.READ_PACKAGES_TOKEN }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Restore generated Java clients
        uses: actions/cache/restore@v3
        with:
          path: |
            src/generated/java
          key: generated-java-clients-${{ github.repository }}-${{ github.ref_name }}-${{ github.run_number }}

      - name: Restore Gradle build artefacts
        uses: actions/cache/restore@v3
        with:
          path: |
            build/
          key: build-${{ github.repository }}-${{ github.ref_name }}-${{ github.run_number }}

      - name: Run unit tests
        run: ./gradlew -x compileJava -x processResources -x compileKotlin -x classes test --info

      - name: Publish unit test results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          check_name: unit-test-results
          files: |
            build/test-results/**/*.xml
            src/main/app/reports/*.xml

  build-docker-image-and-run-itests:
    needs: [build]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      BUILD_NUMBER: ${{ needs.build.outputs.build_number }}
      BRANCH_NAME: ${{ needs.build.outputs.branch_name }}
      ZAC_DOCKER_IMAGE: ${{ needs.build.outputs.zac_docker_image }}
      GIT_COMMIT_HASH: ${{ github.sha }}
      BAG_API_CLIENT_MP_REST_URL: $${{ vars.BAG_API_CLIENT_MP_REST_URL }}
      BAG_API_KEY: ${{ secrets.BAG_API_KEY }}
    steps:
      # workaround to avoid 'No space left on device' error
      # see: https://github.com/orgs/community/discussions/25678#discussioncomment-5242449
      - name: Delete unnecessary tools folder to make space on disk
        run: rm -rf /opt/hostedtoolcache

      - uses: actions/checkout@v4

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Restore Maven build artefacts
        uses: actions/cache/restore@v3
        with:
          path: |
            target/
          key: maven-build-${{ github.repository }}-${{ github.ref_name }}-${{ github.run_number }}

      - name: Build Docker image
        run: |
          ./gradlew \
          -PzacDockerImage=${ZAC_DOCKER_IMAGE} \
          -PversionNumber=${BUILD_NUMBER} \
          -PbranchName=${BRANCH_NAME} \
          -PcommitHash=${GIT_COMMIT_HASH} \
          buildDockerImage \
          -x generateWildflyBootableJar

      # Make sure this step is run _after_ we have built our ZAC Docker Image because
      # we do not want the ZAC Docker image to be cached.
      # See: https://github.com/ScribeMD/docker-cache/issues/532
      - name: Cache Docker images
        uses: ScribeMD/docker-cache@0.3.6
        with:
          key: docker-${{ runner.os }}-${{ hashFiles('docker-compose.yaml') }}

      - name: Run integration tests
        run: ./gradlew -PzacDockerImage=${ZAC_DOCKER_IMAGE} -x compileJava -x processResources -x compileKotlin -x classes itest --info

      - name: Publish integration test results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          check_name: integration-test-results
          files: |
            build/test-results/itest/**/*.xml

      - name: Save Docker Image
        if: github.ref == 'refs/heads/main'
        run: docker save --output docker-image.tar ${ZAC_DOCKER_IMAGE}

      - name: Cache Docker Image
        if: github.ref == 'refs/heads/main'
        uses: actions/cache/save@v3
        with:
          path: docker-image.tar
          key: docker-image-${{ github.repository }}-${{ github.ref_name }}-${{ github.run_number }}

  push-docker-image:
    needs: [build, run-unit-tests, build-docker-image-and-run-itests]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.ref == 'refs/heads/main'
    env:
      ZAC_DOCKER_IMAGE: ${{ needs.build.outputs.zac_docker_image }}
    steps:
      - name: Docker Login
        uses: docker/login-action@v3
        with:
          registry: ${{ env.CONTAINER_REGISTRY_URL }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Restore Docker Image
        uses: actions/cache/restore@v3
        with:
          path: docker-image.tar
          key: docker-image-${{ github.repository }}-${{ github.ref_name }}-${{ github.run_number }}

      - name: Load Docker Image
        run: docker load --input docker-image.tar

      - name: Tag Docker Image with 'latest' tag
        run: docker tag ${ZAC_DOCKER_IMAGE} ${CONTAINER_REGISTRY_URL}/${APPLICATION_NAME}:latest

      - name: Push Docker Image with all tags
        run: docker push --all-tags ${CONTAINER_REGISTRY_URL}/${APPLICATION_NAME}

  trigger-provision:
    needs: [push-docker-image]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROVISION_TOKEN }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: 'infonl',
              repo: 'dimpact-provisioning',
              workflow_id: 'azure-provision-zaakafhandelcomponent.yml',
              inputs: {
                tag: '${{  github.ref_name }}-${{ github.run_number }}',
              },
              ref: 'main'
            })
