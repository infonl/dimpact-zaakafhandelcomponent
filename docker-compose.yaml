version: "3.9"
services:
  # Keycloak
  zac-keycloak:
    image: quay.io/keycloak/keycloak:22.0.1
    container_name: zac-keycloak
    depends_on:
      zac-keycloak-database:
          condition: service_healthy
    ports:
      - "8081:8080"
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
      - DB_VENDOR=postgres
      - DB_ADDR=zac-keycloak-database
      - DB_USER=keycloak
      - DB_NAME=keycloak
      - DB_PASSWORD=keycloak
      - ZAC_GROUP_A_EMAIL_ADDRESS=${DOCKER_COMPOSE_LDAP_GROUP_A_EMAIL_ADDRESS:-test-group-a@example.com}
    volumes:
      - ./scripts/docker-compose/imports/keycloak:/opt/keycloak/data/import
    command:
      - "start-dev"
      - "--import-realm"

  zac-keycloak-database:
    image: postgres:15.4
    container_name: zac-keycloak-database
    ports:
      - "54326:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 20s
      timeout: 60s
      retries: 5
      start_period: 30s
    environment:
      - POSTGRES_USER=keycloak
      - POSTGRES_PASSWORD=keycloak
      - POSTGRES_DB=keycloak
    volumes:
      - ./scripts/docker-compose/volume-data/zac-keycloak-database-data:/var/lib/postgresql/data

  # ZAC database
  zac-database:
    image: postgres:15.4
    container_name: zac-database
    ports:
      - "54320:5432"
    environment:
      POSTGRES_USER: zac
      POSTGRES_PASSWORD: password
      POSTGRES_DB: zac
    volumes:
      - ./scripts/docker-compose/imports/zac-database/init-zac-database.sql:/docker-entrypoint-initdb.d/init-zac-database.sql
      - ./scripts/docker-compose/volume-data/zac-database-data:/var/lib/postgresql/data

  openzaak-database:
    image: postgis/postgis:15-3.4
    container_name: openzaak-database
    ports:
      - "54322:5432"
    platform: linux/amd64
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 20s
      timeout: 60s
      retries: 5
      start_period: 30s
    environment:
      - POSTGRES_USER=openzaak
      - POSTGRES_PASSWORD=openzaak
      - POSTGRES_DB=openzaak
      - BAG_API_CLIENT_MP_REST_URL=${BAG_API_CLIENT_MP_REST_URL:-https://api.bag.acceptatie.kadaster.nl/lvbag/individuelebevragingen/v2/}
      - BAG_API_KEY=${BAG_API_KEY:-please-request-a-bag-api-key}
    volumes:
      - ./scripts/docker-compose/imports/openzaak-database:/docker-entrypoint-initdb.d
      - ./scripts/docker-compose/volume-data/openzaak-database-data:/var/lib/postgresql/data

  openzaak:
    image: openzaak/open-zaak:1.8.2
    container_name: openzaak
    platform: linux/amd64
    environment:
      - DB_HOST=openzaak-database
      - DB_USER=openzaak
      - DB_PASSWORD=openzaak
      - DB_NAME=openzaak
      - CACHE_DEFAULT=redis:6379/0
      - CACHE_AXES=redis:6379/0
      - DEBUG=true
      - ALLOWED_HOSTS=localhost,host.docker.internal,172.17.0.1,openzaak
      - OPENZAAK_SUPERUSER_USERNAME=admin
      - OPENZAAK_SUPERUSER_EMAIL=noreply@example.com
      - DJANGO_SUPERUSER_PASSWORD=admin
      - SECRET_KEY=openZaakSecretKey
      - SENDFILE_BACKEND=django_sendfile.backends.simple
      - NOTIFICATIONS_DISABLED=true
      - OPENZAAK_DOMAIN=localhost:8001
    ports:
      - "8001:8000"
    depends_on:
      openzaak-database:
        condition: service_healthy
      redis:
        condition: service_started

  redis:
    image: redis:6.2.6
    container_name: redis

  objecten-api:
    image: maykinmedia/objects-api:2.1.1
    container_name: objecten-api
    platform: linux/amd64
    ports:
      - "8010:8000"
    environment: &objects-env
      - CORS_ALLOW_ALL_ORIGINS=true
      - SECRET_KEY=objectenApiSecretKey
      - DJANGO_SETTINGS_MODULE=objects.conf.docker
      - DB_HOST=objecten-api-database
      - DEBUG=true
      - TWO_FACTOR_FORCE_OTP_ADMIN=False # this is not available yet in this version
      - TWO_FACTOR_PATCH_ADMIN=False
    depends_on:
      objecten-api-database:
        condition: service_healthy

  objecten-api-database:
    image: postgis/postgis:15-3.4
    container_name: objecten-api-database
    ports:
      - "54323:5432"
    platform: linux/amd64
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 20s
      timeout: 60s
      retries: 5
      start_period: 30s
    environment:
      - POSTGRES_USER=objects
      - POSTGRES_PASSWORD=objects
      - POSTGRES_DB=objects

  objecten-api-import:
    image: maykinmedia/objects-api:2.1.1
    container_name: objects-api-import
    platform: linux/amd64
    environment: *objects-env
    # in the current version of django it is not possible to create a new user with password without user interaction by using the createsuperuser command
    command: sh init/init.sh
    volumes:
      - ./scripts/docker-compose/imports/objects-api/fixtures:/app/src/objects/fixtures
      - ./scripts/docker-compose/imports/objects-api/init:/app/init
    depends_on:
      - objecten-api

  objecttypen-api:
    image: maykinmedia/objecttypes-api:2.1.0
    container_name: objecttypen-api
    platform: linux/amd64
    ports:
      - "8011:8000"
    environment: &objecttypes-env
      - CORS_ALLOW_ALL_ORIGINS=true
      - SECRET_KEY=objecttypenApiSecretKey
      - DJANGO_SETTINGS_MODULE=objecttypes.conf.docker
      - DB_HOST=objecttypen-api-database
      - DEBUG=true
      - TWO_FACTOR_FORCE_OTP_ADMIN=False # this is not available yet in this version
      - TWO_FACTOR_PATCH_ADMIN=False
    depends_on:
      objecttypen-api-database:
        condition: service_healthy

  objecttypen-api-database:
    image: postgres:15.4
    container_name: objecttypen-api-database
    ports:
      - "54324:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 20s
      timeout: 60s
      retries: 5
      start_period: 30s
    environment:
      - POSTGRES_USER=objecttypes
      - POSTGRES_PASSWORD=objecttypes
      - POSTGRES_DB=objecttypes

  objecttypen-api-import:
    image: maykinmedia/objecttypes-api:2.1.0
    container_name: objecttypen-api-import
    platform: linux/amd64
    environment: *objecttypes-env
    command: sh init/init.sh
    volumes:
      - ./scripts/docker-compose/imports/objecttypes-api/fixtures:/app/src/objecttypes/fixtures
      - ./scripts/docker-compose/imports/objecttypes-api/init:/app/init
    depends_on:
      - objecttypen-api

  # Solr
  zac-solr:
    image: solr:9.2.1
    container_name: zac-solr
    ports:
      - "8983:8983"
    volumes:
      - ./scripts/docker-compose/volume-data/solr-data:/var/solr/data
    entrypoint:
      - bash
      - "-c"
      - "precreate-core zac; exec solr -f"

  # Open Policy Agent (OPA)
  zac-opa:
    image: openpolicyagent/opa:edge-static
    container_name: zac-opa
    command: run --server --log-level debug
    ports:
      - "8181:8181"

  openldap:
    image: bitnami/openldap:2.6.4
    container_name: openldap
    ports:
      - "1389:1389"
      - "1636:1636"
    volumes:
      - ./scripts/docker-compose/imports/openldap/schemas:/schemas
      - ./scripts/docker-compose/imports/openldap/ldifs:/ldifs
      - ./scripts/docker-compose/imports/openldap/zac-scripts:/zac-scripts
    environment:
      - LDAP_ADMIN_USERNAME=admin
      - LDAP_ADMIN_PASSWORD=admin
      - LDAP_ROOT=dc=example,dc=org
      - LDAP_SKIP_DEFAULT_TREE=yes
      - ZAC_LDAP_TESTUSER1_EMAIL_ADDRESS=${DOCKER_COMPOSE_LDAP_TEST_USER_1_EMAIL_ADDRESS:-testuser1@example.com}
      - ZAC_LDAP_TESTUSER2_EMAIL_ADDRESS=${DOCKER_COMPOSE_LDAP_TEST_USER_2_EMAIL_ADDRESS:-testuser2@example.com}
      - ZAC_LDAP_GROUP_A_EMAIL_ADDRESS=${DOCKER_COMPOSE_LDAP_GROUP_A_EMAIL_ADDRESS:-test-group-a@example.com}
    entrypoint: ["/zac-scripts/generate-zac-import-ldif-and-start-openldap.sh"]
    command: ["/opt/bitnami/scripts/openldap/run.sh"]

  # VNG ZGW referentielijsten ('VRL') (see: https://github.com/VNG-Realisatie/VNG-referentielijsten)
  zgw-referentielijsten-database:
    image: postgres:15.4
    container_name: zgw-referentielijsten-database
    ports:
      - "54321:5432"
    environment:
      - POSTGRES_USER=vrl
      - POSTGRES_PASSWORD=vrl
      - POSTGRES_DB=vrl
    volumes:
      - ./scripts/docker-compose/volume-data/zgw-referentielijsten-database-data:/var/lib/postgresql/data

  zgw-referentielijsten:
    image: ghcr.io/infonl/vng-referentielijsten:0.6.1
    container_name: zgw-referentielijsten
    environment:
      - DB_HOST=zgw-referentielijsten-database
      - DB_NAME=vrl
      - DB_USER=vrl
      - DB_PASSWORD=vrl
      - DJANGO_SETTINGS_MODULE=vrl.conf.docker
      - SECRET_KEY=zgwReferentielijstenSecretKey
    ports:
      - "8020:8000"
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:8000"]
      interval: 20s
      timeout: 60s
      retries: 5
      start_period: 30s
    depends_on:
      - zgw-referentielijsten-database

  # Insert required test data into the VRL database after the VRL application has started up and finished initializing the database
  zgw-referentielijsten-database-init:
    image: postgres:15.4
    container_name: zgw-referentielijsten-database-init
    volumes:
      - ./scripts/docker-compose/imports/zgw-referentielijsten/init-zgw-referentielijsten-database.sql:/tmp/init-zgw-referentielijsten-database.sql
    command: bash -c "psql postgresql://vrl:vrl@zgw-referentielijsten-database/vrl < /tmp/init-zgw-referentielijsten-database.sql"
    depends_on:
      zgw-referentielijsten:
        condition: service_healthy

  # The GBA mock is required by the BRP proxy
  gbamock:
    image: ghcr.io/brp-api/haal-centraal-brp-bevragen-gba-mock:2.0.8
    platform: linux/amd64
    container_name: gbamock
    environment:
      - ASPNETCORE_ENVIRONMENT=Release
      - ASPNETCORE_URLS=http://+:5010
    ports:
      - "5010:5010"

  brpproxy:
    image: ghcr.io/brp-api/haal-centraal-brp-bevragen-proxy:2.1.0
    platform: linux/amd64
    container_name: brpproxy
    environment:
      - ASPNETCORE_ENVIRONMENT=Release
      - ASPNETCORE_URLS=http://+:5000
    ports:
      - "5001:5000"
    depends_on:
      - gbamock

  openklant-database:
    image: postgres:15.4
    container_name: openklant-database
    ports:
      - "54325:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 20s
      timeout: 60s
      retries: 5
      start_period: 30s
    environment:
      - POSTGRES_USER=openklant
      - POSTGRES_PASSWORD=openklant
      - POSTGRES_DB=openklant
    volumes:
      - ./scripts/docker-compose/imports/openklant-database:/docker-entrypoint-initdb.d
      - ./scripts/docker-compose/volume-data/openklant-database-data:/var/lib/postgresql/data

  openklant:
    image: docker.io/maykinmedia/open-klant:latest
    container_name: openklant
    platform: linux/amd64
    environment:
      - ALLOWED_HOSTS=localhost,host.docker.internal,172.17.0.1,openklant
      - DB_HOST=openklant-database
      - DB_USER=openklant
      - DB_PASSWORD=openklant
      - DB_NAME=openklant
      - CACHE_DEFAULT=redis:6379/0
      - CACHE_AXES=redis:6379/0
      - DJANGO_SETTINGS_MODULE=openklant.conf.docker
      - IS_HTTPS=no
      - NOTIFICATIONS_DISABLED=True
      - SECRET_KEY=openZaakSecretKey
    ports:
      - "8002:8000"
    depends_on:
      openklant-database:
        condition: service_healthy
      redis:
        condition: service_started
