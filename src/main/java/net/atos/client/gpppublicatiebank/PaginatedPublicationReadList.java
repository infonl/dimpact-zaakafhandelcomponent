/**
 * WOO Publications
 *  ## Documentatie  De Woo-Publicatiebank API stelt client-applicaties in staat om publicaties van documenten te raadplegen en te beheren in het kader van een open overheid. Deze API-documentatie bevat drie logische 'domeinen'.  ### Domeinen  **Metadata**  Publicaties en hun gerelateerde documenten moeten bepaalde metadata hebben. De metadata-endpoints stellen client-applicaties in staat om beschikbare metadata op te halen (en in sommige resources ook aan te maken of bij te werken).  * [Organisaties](#tag/Organisaties): bekende overheidsorganisaties, zoals gemeentes, provincies... * [Informatiecategorieën](#tag/Informatiecategorieen): de voorgeschreven categorieën voor de [DiWoo](https://standaarden.overheid.nl/diwoo/metadata)-standaard, optioneel uitgebreid met organisatiespecifieke categorieën. * [Thema's](#tag/Themas): een boomstructuur van ouder/kind-thema's om verder te beschrijven waar publicaties over gaan.  **Publicaties**  * [Publicaties](#tag/Publicaties): een publicatie is een logische eenheid van informatie die openbaar gemaakt moet worden - die kan één of meerdere documenten bevatten. Metadata wordt typisch gekoppeld aan de publicatie in plaats van aan de documenten die erin zitten. * [Documenten](#tag/Documenten): de daadwerkelijke bestanden/documenten die openbaar worden gemaakt en geïndexeerd in zoekmachines.  **Catalogi API**  De [Catalogi API](#tag/Catalogi-API)-eindpunten zijn een implementatiedetail van hoe deze API werkt. Client-applicaties hoeven hier niets mee te doen. Ze zijn nodig om de Documenten API te kunnen hergebruiken voor de daadwerkelijke opslag van bestanden.  ### Authenticatie  **API-sleutel**  De API-endpoints vereisen authenticatie waarvoor je een API-sleutel moet hebben. API-sleutels worden aangemaakt in de beheerinterface (zie de functionele documentatie).  Wanneer je een API-sleutel hebt, dan moet je deze meesturen in elk verzoek in een request header:  ``` Authorization: Token mijn-voorbeeld-api-sleutel ```  Vervang `mijn-voorbeeld-api-sleutel` door je eigen API-sleutel.  **Audit-headers**  Daarnaast vereisen de meeste endpoints dat er request headers worden meegestuurd voor de audit logs:  ``` Audit-User-ID: unieke-identificatie@example.com Audit-User-Representation: Alice B. Tables Audit-Remarks: Eigen publicaties ophalen ``` 
 *
 * The version of the OpenAPI document: 2.0.0 (1)
 * Contact: support@maykinmedia.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.atos.client.gpppublicatiebank;

import java.util.Objects;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;

import jakarta.json.bind.annotation.JsonbProperty;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;


public class PaginatedPublicationReadList  {

  
  @JsonbProperty("count")
  protected Integer count;

  @JsonbProperty("next")
  protected URI next;

  @JsonbProperty("previous")
  protected URI previous;

  @JsonbProperty("results")
  protected List<@Valid PublicationRead> results = new ArrayList<>();

  /**
   * Get count
   * @return count
   **/
  @NotNull
  public Integer getCount() {
    return count;
  }

  /**
   * Set count
   */
  public void setCount(Integer count) {
    this.count = count;
  }

  public PaginatedPublicationReadList count(Integer count) {
    this.count = count;
    return this;
  }

  /**
   * Get next
   * @return next
   **/
  public URI getNext() {
    return next;
  }

  /**
   * Set next
   */
  public void setNext(URI next) {
    this.next = next;
  }

  public PaginatedPublicationReadList next(URI next) {
    this.next = next;
    return this;
  }

  /**
   * Get previous
   * @return previous
   **/
  public URI getPrevious() {
    return previous;
  }

  /**
   * Set previous
   */
  public void setPrevious(URI previous) {
    this.previous = previous;
  }

  public PaginatedPublicationReadList previous(URI previous) {
    this.previous = previous;
    return this;
  }

  /**
   * Get results
   * @return results
   **/
  @NotNull
  public List<@Valid PublicationRead> getResults() {
    return results;
  }

  /**
   * Set results
   */
  public void setResults(List<@Valid PublicationRead> results) {
    this.results = results;
  }

  public PaginatedPublicationReadList results(List<@Valid PublicationRead> results) {
    this.results = results;
    return this;
  }

  public PaginatedPublicationReadList addResultsItem(PublicationRead resultsItem) {
    if (this.results == null) {
      this.results = new ArrayList<>();
    }
    this.results.add(resultsItem);
    return this;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaginatedPublicationReadList paginatedPublicationReadList = (PaginatedPublicationReadList) o;
    return Objects.equals(this.count, paginatedPublicationReadList.count) &&
        Objects.equals(this.next, paginatedPublicationReadList.next) &&
        Objects.equals(this.previous, paginatedPublicationReadList.previous) &&
        Objects.equals(this.results, paginatedPublicationReadList.results);
  }

  @Override
  public int hashCode() {
    return Objects.hash(count, next, previous, results);
  }

  /**
   * Create a string representation of this pojo.
   */
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaginatedPublicationReadList {\n");
    
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    next: ").append(toIndentedString(next)).append("\n");
    sb.append("    previous: ").append(toIndentedString(previous)).append("\n");
    sb.append("    results: ").append(toIndentedString(results)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private static String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

