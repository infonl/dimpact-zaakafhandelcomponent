/**
 * WOO Publications
 *  ## Documentatie  De Woo-Publicatiebank API stelt client-applicaties in staat om publicaties van documenten te raadplegen en te beheren in het kader van een open overheid. Deze API-documentatie bevat drie logische 'domeinen'.  ### Domeinen  **Metadata**  Publicaties en hun gerelateerde documenten moeten bepaalde metadata hebben. De metadata-endpoints stellen client-applicaties in staat om beschikbare metadata op te halen (en in sommige resources ook aan te maken of bij te werken).  * [Organisaties](#tag/Organisaties): bekende overheidsorganisaties, zoals gemeentes, provincies... * [Informatiecategorieën](#tag/Informatiecategorieen): de voorgeschreven categorieën voor de [DiWoo](https://standaarden.overheid.nl/diwoo/metadata)-standaard, optioneel uitgebreid met organisatiespecifieke categorieën. * [Thema's](#tag/Themas): een boomstructuur van ouder/kind-thema's om verder te beschrijven waar publicaties over gaan.  **Publicaties**  * [Publicaties](#tag/Publicaties): een publicatie is een logische eenheid van informatie die openbaar gemaakt moet worden - die kan één of meerdere documenten bevatten. Metadata wordt typisch gekoppeld aan de publicatie in plaats van aan de documenten die erin zitten. * [Documenten](#tag/Documenten): de daadwerkelijke bestanden/documenten die openbaar worden gemaakt en geïndexeerd in zoekmachines.  **Catalogi API**  De [Catalogi API](#tag/Catalogi-API)-eindpunten zijn een implementatiedetail van hoe deze API werkt. Client-applicaties hoeven hier niets mee te doen. Ze zijn nodig om de Documenten API te kunnen hergebruiken voor de daadwerkelijke opslag van bestanden.  ### Authenticatie  **API-sleutel**  De API-endpoints vereisen authenticatie waarvoor je een API-sleutel moet hebben. API-sleutels worden aangemaakt in de beheerinterface (zie de functionele documentatie).  Wanneer je een API-sleutel hebt, dan moet je deze meesturen in elk verzoek in een request header:  ``` Authorization: Token mijn-voorbeeld-api-sleutel ```  Vervang `mijn-voorbeeld-api-sleutel` door je eigen API-sleutel.  **Audit-headers**  Daarnaast vereisen de meeste endpoints dat er request headers worden meegestuurd voor de audit logs:  ``` Audit-User-ID: unieke-identificatie@example.com Audit-User-Representation: Alice B. Tables Audit-Remarks: Eigen publicaties ophalen ``` 
 *
 * The version of the OpenAPI document: 2.0.0 (1)
 * Contact: support@maykinmedia.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.atos.client.gpppublicatiebank;

import java.util.Objects;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import jakarta.json.bind.annotation.JsonbProperty;
import jakarta.json.bind.annotation.JsonbCreator;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;


public class Theme  {
  public static final int NAAM_MAX_LENGTH = 80;

  
  @JsonbProperty("uuid")
  protected UUID uuid;

 /**
  * De unieke IRI waarmee het thema in de overheid.nl waardenlijst gedefinieerd is. Voor zelf-toegevoegde items wordt een identificatie gegenereerd.
  */
  @JsonbProperty("identifier")
  protected URI identifier;

  @JsonbProperty("naam")
  protected String naam;

 /**
  * De subthema's die binnen het huidige thema bestaan.
  */
  @JsonbProperty("subThemes")
  protected List<@Valid Theme> subThemes = new ArrayList<>();

  public Theme() {
  }

 @JsonbCreator
  public Theme(
    @JsonbProperty(value = "identifier") URI identifier
  ) {
    this.identifier = identifier;
  }
  
  /**
   * Get uuid
   * @return uuid
   **/
  public UUID getUuid() {
    return uuid;
  }

  /**
   * Set uuid
   */
  public void setUuid(UUID uuid) {
    this.uuid = uuid;
  }

  public Theme uuid(UUID uuid) {
    this.uuid = uuid;
    return this;
  }

  /**
   * De unieke IRI waarmee het thema in de overheid.nl waardenlijst gedefinieerd is. Voor zelf-toegevoegde items wordt een identificatie gegenereerd.
   * @return identifier
   **/
  public URI getIdentifier() {
    return identifier;
  }


  /**
   * Get naam
   * @return naam
   **/
  @NotNull
  @Size(max=NAAM_MAX_LENGTH)  public String getNaam() {
    return naam;
  }

  /**
   * Set naam
   */
  public void setNaam(String naam) {
    this.naam = naam;
  }

  public Theme naam(String naam) {
    this.naam = naam;
    return this;
  }

  /**
   * De subthema&#39;s die binnen het huidige thema bestaan.
   * @return subThemes
   **/
  @NotNull
  public List<@Valid Theme> getSubThemes() {
    return subThemes;
  }

  /**
   * Set subThemes
   */
  public void setSubThemes(List<@Valid Theme> subThemes) {
    this.subThemes = subThemes;
  }

  public Theme subThemes(List<@Valid Theme> subThemes) {
    this.subThemes = subThemes;
    return this;
  }

  public Theme addSubThemesItem(Theme subThemesItem) {
    if (this.subThemes == null) {
      this.subThemes = new ArrayList<>();
    }
    this.subThemes.add(subThemesItem);
    return this;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Theme theme = (Theme) o;
    return Objects.equals(this.uuid, theme.uuid) &&
        Objects.equals(this.identifier, theme.identifier) &&
        Objects.equals(this.naam, theme.naam) &&
        Objects.equals(this.subThemes, theme.subThemes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uuid, identifier, naam, subThemes);
  }

  /**
   * Create a string representation of this pojo.
   */
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Theme {\n");
    
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    naam: ").append(toIndentedString(naam)).append("\n");
    sb.append("    subThemes: ").append(toIndentedString(subThemes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private static String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

