/**
 * WOO Publications
 *  ## Documentatie  De Woo-Publicatiebank API stelt client-applicaties in staat om publicaties van documenten te raadplegen en te beheren in het kader van een open overheid. Deze API-documentatie bevat drie logische 'domeinen'.  ### Domeinen  **Metadata**  Publicaties en hun gerelateerde documenten moeten bepaalde metadata hebben. De metadata-endpoints stellen client-applicaties in staat om beschikbare metadata op te halen (en in sommige resources ook aan te maken of bij te werken).  * [Organisaties](#tag/Organisaties): bekende overheidsorganisaties, zoals gemeentes, provincies... * [Informatiecategorieën](#tag/Informatiecategorieen): de voorgeschreven categorieën voor de [DiWoo](https://standaarden.overheid.nl/diwoo/metadata)-standaard, optioneel uitgebreid met organisatiespecifieke categorieën. * [Thema's](#tag/Themas): een boomstructuur van ouder/kind-thema's om verder te beschrijven waar publicaties over gaan.  **Publicaties**  * [Publicaties](#tag/Publicaties): een publicatie is een logische eenheid van informatie die openbaar gemaakt moet worden - die kan één of meerdere documenten bevatten. Metadata wordt typisch gekoppeld aan de publicatie in plaats van aan de documenten die erin zitten. * [Documenten](#tag/Documenten): de daadwerkelijke bestanden/documenten die openbaar worden gemaakt en geïndexeerd in zoekmachines.  **Catalogi API**  De [Catalogi API](#tag/Catalogi-API)-eindpunten zijn een implementatiedetail van hoe deze API werkt. Client-applicaties hoeven hier niets mee te doen. Ze zijn nodig om de Documenten API te kunnen hergebruiken voor de daadwerkelijke opslag van bestanden.  ### Authenticatie  **API-sleutel**  De API-endpoints vereisen authenticatie waarvoor je een API-sleutel moet hebben. API-sleutels worden aangemaakt in de beheerinterface (zie de functionele documentatie).  Wanneer je een API-sleutel hebt, dan moet je deze meesturen in elk verzoek in een request header:  ``` Authorization: Token mijn-voorbeeld-api-sleutel ```  Vervang `mijn-voorbeeld-api-sleutel` door je eigen API-sleutel.  **Audit-headers**  Daarnaast vereisen de meeste endpoints dat er request headers worden meegestuurd voor de audit logs:  ``` Audit-User-ID: unieke-identificatie@example.com Audit-User-Representation: Alice B. Tables Audit-Remarks: Eigen publicaties ophalen ``` 
 *
 * The version of the OpenAPI document: 2.0.0 (1)
 * Contact: support@maykinmedia.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.atos.client.gpppublicatiebank;

import java.util.Objects;
import java.net.URI;
import java.util.UUID;

import jakarta.json.bind.annotation.JsonbProperty;
import jakarta.json.bind.annotation.JsonbCreator;
import jakarta.validation.constraints.*;


public class FilePart  {

  
 /**
  * Het unieke ID van een bestandsdeel horend bij een document.
  */
  @JsonbProperty("uuid")
  protected UUID uuid;

 /**
  * Endpoint waar het bestandsdeel geüpload moet worden.
  */
  @JsonbProperty("url")
  protected URI url;

 /**
  * Index van het bestandsdeel, geeft aan welk bestandsdeel precies geüpload wordt.
  */
  @JsonbProperty("volgnummer")
  protected Integer volgnummer;

 /**
  * Bestandsdeelomvang, in bytes. Grote bestanden moeten in meerdere stukken gesplitst worden, waarbij voor elk stuk een bepaalde bestandsgrootte verwacht wordt (deze grootte is ingesteld op de Documenten-API-server). Een bestandsdeel is pas voltooid als er binaire data van precies deze omvang geüpload zijn.
  */
  @JsonbProperty("omvang")
  protected Integer omvang;

 /**
  * De binaire data van dit stuk, dit wordt doorgezet naar de achterliggende Documenten-API. De bestandsgrootte moet overeenkomen met de `omvang` van het bestandsdeel.
  */
  @JsonbProperty("inhoud")
  protected String inhoud;

  public FilePart() {
  }

 @JsonbCreator
  public FilePart(
    @JsonbProperty(value = "uuid") UUID uuid, 
    @JsonbProperty(value = "url") URI url, 
    @JsonbProperty(value = "volgnummer") Integer volgnummer, 
    @JsonbProperty(value = "omvang") Integer omvang
  ) {
    this.uuid = uuid;
    this.url = url;
    this.volgnummer = volgnummer;
    this.omvang = omvang;
  }
  
  /**
   * Het unieke ID van een bestandsdeel horend bij een document.
   * @return uuid
   **/
  public UUID getUuid() {
    return uuid;
  }


  /**
   * Endpoint waar het bestandsdeel geüpload moet worden.
   * @return url
   **/
  public URI getUrl() {
    return url;
  }


  /**
   * Index van het bestandsdeel, geeft aan welk bestandsdeel precies geüpload wordt.
   * @return volgnummer
   **/
  public Integer getVolgnummer() {
    return volgnummer;
  }


  /**
   * Bestandsdeelomvang, in bytes. Grote bestanden moeten in meerdere stukken gesplitst worden, waarbij voor elk stuk een bepaalde bestandsgrootte verwacht wordt (deze grootte is ingesteld op de Documenten-API-server). Een bestandsdeel is pas voltooid als er binaire data van precies deze omvang geüpload zijn.
   * @return omvang
   **/
  public Integer getOmvang() {
    return omvang;
  }


  /**
   * De binaire data van dit stuk, dit wordt doorgezet naar de achterliggende Documenten-API. De bestandsgrootte moet overeenkomen met de &#x60;omvang&#x60; van het bestandsdeel.
   * @return inhoud
   **/
  @NotNull
  public String getInhoud() {
    return inhoud;
  }

  /**
   * Set inhoud
   */
  public void setInhoud(String inhoud) {
    this.inhoud = inhoud;
  }

  public FilePart inhoud(String inhoud) {
    this.inhoud = inhoud;
    return this;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FilePart filePart = (FilePart) o;
    return Objects.equals(this.uuid, filePart.uuid) &&
        Objects.equals(this.url, filePart.url) &&
        Objects.equals(this.volgnummer, filePart.volgnummer) &&
        Objects.equals(this.omvang, filePart.omvang) &&
        Objects.equals(this.inhoud, filePart.inhoud);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uuid, url, volgnummer, omvang, inhoud);
  }

  /**
   * Create a string representation of this pojo.
   */
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FilePart {\n");
    
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    volgnummer: ").append(toIndentedString(volgnummer)).append("\n");
    sb.append("    omvang: ").append(toIndentedString(omvang)).append("\n");
    sb.append("    inhoud: ").append(toIndentedString(inhoud)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private static String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

