/**
 * Besluiten API
 * Een API om een besluitregistratiecomponent (BRC) te benaderen.  Een BESLUIT wordt veelal schriftelijk vastgelegd maar dit is niet noodzakelijk. Omgekeerd kan het voorkomen dat in een INFORMATIEOBJECT meerdere besluiten vastgelegd zijn. Vandaar de N:M-relatie naar INFORMATIEOBJECT. Een besluit komt voort uit een zaak van de zaakbehandelende organisatie dan wel is een besluit van een andere organisatie dat het onderwerp (object) is van een zaak van de zaakbehandelende organisatie. BESLUIT heeft dan ook een optionele relatie met de ZAAK waarvan het een uitkomst is.  De typering van BESLUITen is in de Catalogi API (ZTC) ondergebracht in de vorm van BESLUITTYPEn.  **Afhankelijkheden**  Deze API is afhankelijk van:  * Catalogi API * Notificaties API * Documenten API *(optioneel)* * Zaken API *(optioneel)* * Autorisaties API *(optioneel)*   ### Autorisatie  Deze API vereist autorisatie.  _Zelf een token genereren_  De tokens die gebruikt worden voor autorisatie zijn [JWT's](https://jwt.io) (JSON web token). In de API calls moeten deze gebruikt worden in de `Authorization` header:  ``` Authorization: Bearer <token> ```  Om een JWT te genereren heb je een `client ID` en een `secret` nodig. Het JWT moet gebouwd worden volgens het `HS256` algoritme. De vereiste payload is:  ```json {     \"iss\": \"<client ID>\",     \"iat\": 1572863906,     \"client_id\": \"<client ID>\",     \"user_id\": \"<user identifier>\",     \"user_representation\": \"<user representation>\" } ```  Als `issuer` gebruik je dus je eigen client ID. De `iat` timestamp is een UNIX-timestamp die aangeeft op welk moment het token gegenereerd is.  `user_id` en `user_representation` zijn nodig voor de audit trails. Het zijn vrije velden met als enige beperking dat de lengte maximaal de lengte van de overeenkomstige velden in de audit trail resources is (zie rest API spec).   ### Notificaties  Deze API publiceert notificaties op het kanaal `besluiten`.  **Main resource**  `besluit`    **Kenmerken**  * `verantwoordelijke_organisatie`: Het RSIN van de niet-natuurlijk persoon zijnde de organisatie die het besluit heeft vastgesteld. * `besluittype`: URL-referentie naar het BESLUITTYPE (in de Catalogi API).  **Resources en acties**   **Handige links**  * [API-documentatie](https://vng-realisatie.github.io/gemma-zaken/standaard/) * [Open Zaak documentatie](https://open-zaak.readthedocs.io/en/latest/) * [Zaakgericht werken](https://www.vngrealisatie.nl/producten/api-standaarden-zaakgericht-werken) * [Open Zaak GitHub](https://github.com/open-zaak/open-zaak)
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@maykinmedia.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.atos.client.zgw.brc.model;

import java.util.ArrayList;
import java.util.List;

import jakarta.json.bind.annotation.JsonbProperty;


public class ValidatieFout  {

 /**
   * URI referentie naar het type fout, bedoeld voor developers
  **/
  @JsonbProperty("type")
  private String type;

 /**
   * Systeemcode die het type fout aangeeft
  **/
  @JsonbProperty("code")
  private String code;

 /**
   * Generieke titel voor het type fout
  **/
  @JsonbProperty("title")
  private String title;

 /**
   * De HTTP status code
  **/
  @JsonbProperty("status")
  private Integer status;

 /**
   * Extra informatie bij de fout, indien beschikbaar
  **/
  @JsonbProperty("detail")
  private String detail;

 /**
   * URI met referentie naar dit specifiek voorkomen van de fout. Deze kan gebruikt worden in combinatie met server logs, bijvoorbeeld.
  **/
  @JsonbProperty("instance")
  private String instance;

  @JsonbProperty("invalidParams")
  private List<FieldValidationError> invalidParams = new ArrayList<>();

 /**
   * URI referentie naar het type fout, bedoeld voor developers
   * @return type
  **/
  public String getType() {
    return type;
  }

  /**
    * Set type
  **/
  public void setType(String type) {
    this.type = type;
  }

  public ValidatieFout type(String type) {
    this.type = type;
    return this;
  }

 /**
   * Systeemcode die het type fout aangeeft
   * @return code
  **/
  public String getCode() {
    return code;
  }

  /**
    * Set code
  **/
  public void setCode(String code) {
    this.code = code;
  }

  public ValidatieFout code(String code) {
    this.code = code;
    return this;
  }

 /**
   * Generieke titel voor het type fout
   * @return title
  **/
  public String getTitle() {
    return title;
  }

  /**
    * Set title
  **/
  public void setTitle(String title) {
    this.title = title;
  }

  public ValidatieFout title(String title) {
    this.title = title;
    return this;
  }

 /**
   * De HTTP status code
   * @return status
  **/
  public Integer getStatus() {
    return status;
  }

  /**
    * Set status
  **/
  public void setStatus(Integer status) {
    this.status = status;
  }

  public ValidatieFout status(Integer status) {
    this.status = status;
    return this;
  }

 /**
   * Extra informatie bij de fout, indien beschikbaar
   * @return detail
  **/
  public String getDetail() {
    return detail;
  }

  /**
    * Set detail
  **/
  public void setDetail(String detail) {
    this.detail = detail;
  }

  public ValidatieFout detail(String detail) {
    this.detail = detail;
    return this;
  }

 /**
   * URI met referentie naar dit specifiek voorkomen van de fout. Deze kan gebruikt worden in combinatie met server logs, bijvoorbeeld.
   * @return instance
  **/
  public String getInstance() {
    return instance;
  }

  /**
    * Set instance
  **/
  public void setInstance(String instance) {
    this.instance = instance;
  }

  public ValidatieFout instance(String instance) {
    this.instance = instance;
    return this;
  }

 /**
   * Get invalidParams
   * @return invalidParams
  **/
  public List<FieldValidationError> getInvalidParams() {
    return invalidParams;
  }

  /**
    * Set invalidParams
  **/
  public void setInvalidParams(List<FieldValidationError> invalidParams) {
    this.invalidParams = invalidParams;
  }

  public ValidatieFout invalidParams(List<FieldValidationError> invalidParams) {
    this.invalidParams = invalidParams;
    return this;
  }

  public ValidatieFout addInvalidParamsItem(FieldValidationError invalidParamsItem) {
    if (this.invalidParams == null) {
      this.invalidParams = new ArrayList<>();
    }
    this.invalidParams.add(invalidParamsItem);
    return this;
  }


  /**
    * Create a string representation of this pojo.
  **/
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ValidatieFout {\n");

    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    detail: ").append(toIndentedString(detail)).append("\n");
    sb.append("    instance: ").append(toIndentedString(instance)).append("\n");
    sb.append("    invalidParams: ").append(toIndentedString(invalidParams)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private static String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
