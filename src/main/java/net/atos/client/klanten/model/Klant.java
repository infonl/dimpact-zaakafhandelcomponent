/*
 * SPDX-FileCopyrightText: 2022 Atos
 * SPDX-License-Identifier: EUPL-1.2+
 */

/**
 * Klanten API
 * Een API om klanten te benaderen.  Een API om zowel klanten te registreren als op te vragen. Een klant is een natuurlijk persoon, niet-natuurlijk persoon (bedrijf) of vestiging waarbij het gaat om niet geverifieerde gegevens. De Klanten API kan zelfstandig of met andere API's samen werken om tot volledige functionaliteit te komen.  **Afhankelijkheden**  Deze API is afhankelijk van:  * Autorisaties API * Notificaties API * Zaken API *(optioneel)* * Documenten API *(optioneel)*  **Autorisatie**  Deze API vereist autorisatie. Je kan de [token-tool](https://zaken-auth.vng.cloud/) gebruiken om JWT-tokens te genereren.  ** Notificaties  Deze API publiceert notificaties op het kanaal `klanten`.  **Main resource**  `klant`    **Kenmerken**  * `subject_type`: Type van de `subject`.  **Resources en acties**   **Handige links**  * [Documentatie](https://zaakgerichtwerken.vng.cloud/standaard) * [Zaakgericht werken](https://zaakgerichtwerken.vng.cloud)
 * <p>
 * The version of the OpenAPI document: 1.0.0
 * Contact: standaarden.ondersteuning@vng.nl
 * <p>
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.atos.client.klanten.model;

import java.lang.reflect.Type;
import java.net.URI;

import jakarta.json.bind.annotation.JsonbCreator;
import jakarta.json.bind.annotation.JsonbProperty;
import jakarta.json.bind.annotation.JsonbTypeDeserializer;
import jakarta.json.bind.annotation.JsonbTypeSerializer;
import jakarta.json.bind.serializer.DeserializationContext;
import jakarta.json.bind.serializer.JsonbDeserializer;
import jakarta.json.bind.serializer.JsonbSerializer;
import jakarta.json.bind.serializer.SerializationContext;
import jakarta.json.stream.JsonGenerator;
import jakarta.json.stream.JsonParser;


public class Klant {

    /**
     * URL-referentie naar dit object. Dit is de unieke identificatie en locatie van dit object.
     **/
    @JsonbProperty("url")
    protected URI url;

    /**
     * Het RSIN van de Niet-natuurlijk persoon zijnde de organisatie die de klant heeft gecreeerd. Dit moet een geldig RSIN zijn van 9 nummers en voldoen aan https://nl.wikipedia.org/wiki/Burgerservicenummer#11-proef
     **/
    @JsonbProperty("bronorganisatie")
    private String bronorganisatie;

    /**
     * De unieke identificatie van de klant binnen de bronorganisatie.
     **/
    @JsonbProperty("klantnummer")
    private String klantnummer;

    /**
     * De bedrijfsnaam van de klant.
     **/
    @JsonbProperty("bedrijfsnaam")
    private String bedrijfsnaam;

    /**
     * De functie van de klant.
     **/
    @JsonbProperty("functie")
    private String functie;

    /**
     * Het label of etiket dat aan de specifieke informatiebron, zoals een webpagina, een bestand of een plaatje op internet is toegewezen waar de KLANT in de regel op het internet vindbaar is.
     **/
    @JsonbProperty("websiteUrl")
    private URI websiteUrl;

    /**
     * De voornaam, voorletters of roepnaam van de klant.
     **/
    @JsonbProperty("voornaam")
    private String voornaam;

    /**
     * Het voorvoegsel van de achternaam van de klant.
     **/
    @JsonbProperty("voorvoegselAchternaam")
    private String voorvoegselAchternaam;

    /**
     * De achternaam van de klant.
     **/
    @JsonbProperty("achternaam")
    private String achternaam;

    /**
     * Het mobiele of vaste telefoonnummer van de klant.
     **/
    @JsonbProperty("telefoonnummer")
    private String telefoonnummer;

    /**
     * Het e-mail adres van de klant.
     **/
    @JsonbProperty("emailadres")
    private String emailadres;

    @JsonbProperty("adres")
    private KlantAdres adres;

    /**
     * URL-referentie naar een subject
     **/
    @JsonbProperty("subject")
    private URI subject;

    @JsonbTypeSerializer(SubjectTypeEnum.Serializer.class)
    @JsonbTypeDeserializer(SubjectTypeEnum.Deserializer.class)
    public enum SubjectTypeEnum {

        NATUURLIJK_PERSOON(String.valueOf("natuurlijk_persoon")),
        NIET_NATUURLIJK_PERSOON(String.valueOf("niet_natuurlijk_persoon")), VESTIGING(String.valueOf("vestiging"));


        String value;

        SubjectTypeEnum(String v) {
            value = v;
        }

        public String value() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static final class Deserializer implements JsonbDeserializer<SubjectTypeEnum> {
            @Override
            public SubjectTypeEnum deserialize(JsonParser parser, DeserializationContext ctx, Type rtType) {
                for (SubjectTypeEnum b : SubjectTypeEnum.values()) {
                    if (String.valueOf(b.value).equals(parser.getString())) {
                        return b;
                    }
                }
                throw new IllegalArgumentException("Unexpected value '" + parser.getString() + "'");
            }
        }

        public static final class Serializer implements JsonbSerializer<SubjectTypeEnum> {
            @Override
            public void serialize(SubjectTypeEnum obj, JsonGenerator generator, SerializationContext ctx) {
                generator.write(obj.value);
            }
        }
    }

    /**
     * Type van de `subject`.  Uitleg bij mogelijke waarden:  * `natuurlijk_persoon` - Natuurlijk persoon * `niet_natuurlijk_persoon` - Niet-natuurlijk persoon * `vestiging` - Vestiging
     **/
    @JsonbProperty("subjectType")
    private SubjectTypeEnum subjectType;

    public Klant() {
    }

    @JsonbCreator
    public Klant(
            @JsonbProperty(value = "url", nillable = true) URI url
    ) {
        this.url = url;
    }

    /**
     * URL-referentie naar dit object. Dit is de unieke identificatie en locatie van dit object.
     * @return url
     **/
    public URI getUrl() {
        return url;
    }


    /**
     * Het RSIN van de Niet-natuurlijk persoon zijnde de organisatie die de klant heeft gecreeerd. Dit moet een geldig RSIN zijn van 9 nummers en voldoen aan https://nl.wikipedia.org/wiki/Burgerservicenummer#11-proef
     * @return bronorganisatie
     **/
    public String getBronorganisatie() {
        return bronorganisatie;
    }

    /**
     * Set bronorganisatie
     **/
    public void setBronorganisatie(String bronorganisatie) {
        this.bronorganisatie = bronorganisatie;
    }

    public Klant bronorganisatie(String bronorganisatie) {
        this.bronorganisatie = bronorganisatie;
        return this;
    }

    /**
     * De unieke identificatie van de klant binnen de bronorganisatie.
     * @return klantnummer
     **/
    public String getKlantnummer() {
        return klantnummer;
    }

    /**
     * Set klantnummer
     **/
    public void setKlantnummer(String klantnummer) {
        this.klantnummer = klantnummer;
    }

    public Klant klantnummer(String klantnummer) {
        this.klantnummer = klantnummer;
        return this;
    }

    /**
     * De bedrijfsnaam van de klant.
     * @return bedrijfsnaam
     **/
    public String getBedrijfsnaam() {
        return bedrijfsnaam;
    }

    /**
     * Set bedrijfsnaam
     **/
    public void setBedrijfsnaam(String bedrijfsnaam) {
        this.bedrijfsnaam = bedrijfsnaam;
    }

    public Klant bedrijfsnaam(String bedrijfsnaam) {
        this.bedrijfsnaam = bedrijfsnaam;
        return this;
    }

    /**
     * De functie van de klant.
     * @return functie
     **/
    public String getFunctie() {
        return functie;
    }

    /**
     * Set functie
     **/
    public void setFunctie(String functie) {
        this.functie = functie;
    }

    public Klant functie(String functie) {
        this.functie = functie;
        return this;
    }

    /**
     * Het label of etiket dat aan de specifieke informatiebron, zoals een webpagina, een bestand of een plaatje op internet is toegewezen waar de KLANT in de regel op het internet vindbaar is.
     * @return websiteUrl
     **/
    public URI getWebsiteUrl() {
        return websiteUrl;
    }

    /**
     * Set websiteUrl
     **/
    public void setWebsiteUrl(URI websiteUrl) {
        this.websiteUrl = websiteUrl;
    }

    public Klant websiteUrl(URI websiteUrl) {
        this.websiteUrl = websiteUrl;
        return this;
    }

    /**
     * De voornaam, voorletters of roepnaam van de klant.
     * @return voornaam
     **/
    public String getVoornaam() {
        return voornaam;
    }

    /**
     * Set voornaam
     **/
    public void setVoornaam(String voornaam) {
        this.voornaam = voornaam;
    }

    public Klant voornaam(String voornaam) {
        this.voornaam = voornaam;
        return this;
    }

    /**
     * Het voorvoegsel van de achternaam van de klant.
     * @return voorvoegselAchternaam
     **/
    public String getVoorvoegselAchternaam() {
        return voorvoegselAchternaam;
    }

    /**
     * Set voorvoegselAchternaam
     **/
    public void setVoorvoegselAchternaam(String voorvoegselAchternaam) {
        this.voorvoegselAchternaam = voorvoegselAchternaam;
    }

    public Klant voorvoegselAchternaam(String voorvoegselAchternaam) {
        this.voorvoegselAchternaam = voorvoegselAchternaam;
        return this;
    }

    /**
     * De achternaam van de klant.
     * @return achternaam
     **/
    public String getAchternaam() {
        return achternaam;
    }

    /**
     * Set achternaam
     **/
    public void setAchternaam(String achternaam) {
        this.achternaam = achternaam;
    }

    public Klant achternaam(String achternaam) {
        this.achternaam = achternaam;
        return this;
    }

    /**
     * Het mobiele of vaste telefoonnummer van de klant.
     * @return telefoonnummer
     **/
    public String getTelefoonnummer() {
        return telefoonnummer;
    }

    /**
     * Set telefoonnummer
     **/
    public void setTelefoonnummer(String telefoonnummer) {
        this.telefoonnummer = telefoonnummer;
    }

    public Klant telefoonnummer(String telefoonnummer) {
        this.telefoonnummer = telefoonnummer;
        return this;
    }

    /**
     * Het e-mail adres van de klant.
     * @return emailadres
     **/
    public String getEmailadres() {
        return emailadres;
    }

    /**
     * Set emailadres
     **/
    public void setEmailadres(String emailadres) {
        this.emailadres = emailadres;
    }

    public Klant emailadres(String emailadres) {
        this.emailadres = emailadres;
        return this;
    }

    /**
     * Get adres
     * @return adres
     **/
    public KlantAdres getAdres() {
        return adres;
    }

    /**
     * Set adres
     **/
    public void setAdres(KlantAdres adres) {
        this.adres = adres;
    }

    public Klant adres(KlantAdres adres) {
        this.adres = adres;
        return this;
    }

    /**
     * URL-referentie naar een subject
     * @return subject
     **/
    public URI getSubject() {
        return subject;
    }

    /**
     * Set subject
     **/
    public void setSubject(URI subject) {
        this.subject = subject;
    }

    public Klant subject(URI subject) {
        this.subject = subject;
        return this;
    }

    /**
     * Type van de &#x60;subject&#x60;.  Uitleg bij mogelijke waarden:  * &#x60;natuurlijk_persoon&#x60; - Natuurlijk persoon * &#x60;niet_natuurlijk_persoon&#x60; - Niet-natuurlijk persoon * &#x60;vestiging&#x60; - Vestiging
     * @return subjectType
     **/
    public SubjectTypeEnum getSubjectType() {
        return subjectType;
    }

    /**
     * Set subjectType
     **/
    public void setSubjectType(SubjectTypeEnum subjectType) {
        this.subjectType = subjectType;
    }

    public Klant subjectType(SubjectTypeEnum subjectType) {
        this.subjectType = subjectType;
        return this;
    }


    /**
     * Create a string representation of this pojo.
     **/
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Klant {\n");

        sb.append("    url: ").append(toIndentedString(url)).append("\n");
        sb.append("    bronorganisatie: ").append(toIndentedString(bronorganisatie)).append("\n");
        sb.append("    klantnummer: ").append(toIndentedString(klantnummer)).append("\n");
        sb.append("    bedrijfsnaam: ").append(toIndentedString(bedrijfsnaam)).append("\n");
        sb.append("    functie: ").append(toIndentedString(functie)).append("\n");
        sb.append("    websiteUrl: ").append(toIndentedString(websiteUrl)).append("\n");
        sb.append("    voornaam: ").append(toIndentedString(voornaam)).append("\n");
        sb.append("    voorvoegselAchternaam: ").append(toIndentedString(voorvoegselAchternaam)).append("\n");
        sb.append("    achternaam: ").append(toIndentedString(achternaam)).append("\n");
        sb.append("    telefoonnummer: ").append(toIndentedString(telefoonnummer)).append("\n");
        sb.append("    emailadres: ").append(toIndentedString(emailadres)).append("\n");
        sb.append("    adres: ").append(toIndentedString(adres)).append("\n");
        sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
        sb.append("    subjectType: ").append(toIndentedString(subjectType)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private static String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}

