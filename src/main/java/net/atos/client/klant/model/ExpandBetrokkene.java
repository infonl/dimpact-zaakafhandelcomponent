/*
 * SPDX-FileCopyrightText: 2024 Lifely
 * SPDX-License-Identifier: EUPL-1.2+
 */

/**
 * klantinteracties
 * **Warning: Difference between `PUT` and `PATCH`** Both `PUT` and `PATCH` methods can be used to update the fields in a resource, but
 * there is a key difference in how they handle required fields: * The `PUT` method requires you to specify **all mandatory fields** when
 * updating a resource. If any mandatory field is missing, the update will fail. Optional fields are left unchanged if they are not
 * specified. * The `PATCH` method, on the other hand, allows you to update only the fields you specify. Some mandatory fields can be left
 * out, and the resource will only be updated with the provided data, leaving other fields unchanged.
 *
 * The version of the OpenAPI document: 0.1.2 (1)
 * Contact: standaarden.ondersteuning@vng.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.atos.client.klant.model;

import java.net.URI;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.UUID;

import jakarta.json.bind.annotation.JsonbCreator;
import jakarta.json.bind.annotation.JsonbProperty;


public class ExpandBetrokkene {

    /**
     * Unieke (technische) identificatiecode van de betrokkene bij klantcontact.
     */
    @JsonbProperty("uuid")
    protected UUID uuid;

    /**
     * De unieke URL van deze betrokkene binnen deze API.
     */
    @JsonbProperty("url")
    protected URI url;

    /**
     * Betrokkene bij klantcontact die een partij was.
     */
    @JsonbProperty("wasPartij")
    protected PartijForeignKey wasPartij;

    /**
     * Het klantcontact waar deze persoon of organisatie bij betrokken was.
     */
    @JsonbProperty("hadKlantcontact")
    protected KlantcontactForeignKey hadKlantcontact;

    /**
     * Digitale adressen van de betrokkene bij klantcontact.
     */
    @JsonbProperty("digitaleAdressen")
    protected List<DigitaalAdresForeignKey> digitaleAdressen = new ArrayList<>();

    /**
     * Adres waarop de betrokkene bij klantcontact in naar aanleiding van dat contact af te leggen bezoeken wil ontvangen. Dit mag afwijken
     * van voor de verstrekker eventueel in een basisregistratie bekende adressen.
     */
    @JsonbProperty("bezoekadres")
    protected Bezoekadres bezoekadres;

    /**
     * Adres waarop de betrokkene bij klantcontact naar aanleiding van dat contact te versturen post wil ontvangen. Dit mag afwijken van
     * voor de verstrekker eventueel in een basisregistratie bekende adressen.
     */
    @JsonbProperty("correspondentieadres")
    protected BetrokkeneCorrespondentieadres correspondentieadres;

    /**
     * Naam die de betrokkene bij klantcontact tijdens vervolghandelingen naar aanleiding van dat contact wil gebruiken. Deze mag afwijken
     * van eventueel in de Basisregistratie Personen (BRP) bekende naam van de betrokkene.
     */
    @JsonbProperty("contactnaam")
    protected Contactnaam contactnaam;

    /**
     * De voledige naam van de betrokkene.
     */
    @JsonbProperty("volledigeNaam")
    protected String volledigeNaam;

    /**
     * Rol die de betrokkene bij klantcontact tijdens dat contact vervulde.
     */
    @JsonbProperty("rol")
    protected RolEnum rol;

    /**
     * Naam van de organisatie waarmee de betrokkene bij klantcontact een relatie had.
     */
    @JsonbProperty("organisatienaam")
    protected String organisatienaam;

    @JsonbProperty("initiator")
    protected Boolean initiator;

    @JsonbProperty("_expand")
    protected ExpandBetrokkeneAllOfExpand expand;

    public ExpandBetrokkene() {
    }

    @JsonbCreator
    public ExpandBetrokkene(
            @JsonbProperty(value = "uuid") UUID uuid,
            @JsonbProperty(value = "url") URI url,
            @JsonbProperty(value = "digitaleAdressen") List<DigitaalAdresForeignKey> digitaleAdressen,
            @JsonbProperty(value = "volledigeNaam") String volledigeNaam
    ) {
        this.uuid = uuid;
        this.url = url;
        this.digitaleAdressen = digitaleAdressen;
        this.volledigeNaam = volledigeNaam;
    }

    /**
     * Unieke (technische) identificatiecode van de betrokkene bij klantcontact.
     * 
     * @return uuid
     **/
    public UUID getUuid() {
        return uuid;
    }


    /**
     * De unieke URL van deze betrokkene binnen deze API.
     * 
     * @return url
     **/
    public URI getUrl() {
        return url;
    }


    /**
     * Betrokkene bij klantcontact die een partij was.
     * 
     * @return wasPartij
     **/
    public PartijForeignKey getWasPartij() {
        return wasPartij;
    }

    /**
     * Set wasPartij
     */
    public void setWasPartij(PartijForeignKey wasPartij) {
        this.wasPartij = wasPartij;
    }

    public ExpandBetrokkene wasPartij(PartijForeignKey wasPartij) {
        this.wasPartij = wasPartij;
        return this;
    }

    /**
     * Het klantcontact waar deze persoon of organisatie bij betrokken was.
     * 
     * @return hadKlantcontact
     **/
    public KlantcontactForeignKey getHadKlantcontact() {
        return hadKlantcontact;
    }

    /**
     * Set hadKlantcontact
     */
    public void setHadKlantcontact(KlantcontactForeignKey hadKlantcontact) {
        this.hadKlantcontact = hadKlantcontact;
    }

    public ExpandBetrokkene hadKlantcontact(KlantcontactForeignKey hadKlantcontact) {
        this.hadKlantcontact = hadKlantcontact;
        return this;
    }

    /**
     * Digitale adressen van de betrokkene bij klantcontact.
     * 
     * @return digitaleAdressen
     **/
    public List<DigitaalAdresForeignKey> getDigitaleAdressen() {
        return digitaleAdressen;
    }


    /**
     * Adres waarop de betrokkene bij klantcontact in naar aanleiding van dat contact af te leggen bezoeken wil ontvangen. Dit mag afwijken
     * van voor de verstrekker eventueel in een basisregistratie bekende adressen.
     * 
     * @return bezoekadres
     **/
    public Bezoekadres getBezoekadres() {
        return bezoekadres;
    }

    /**
     * Set bezoekadres
     */
    public void setBezoekadres(Bezoekadres bezoekadres) {
        this.bezoekadres = bezoekadres;
    }

    public ExpandBetrokkene bezoekadres(Bezoekadres bezoekadres) {
        this.bezoekadres = bezoekadres;
        return this;
    }

    /**
     * Adres waarop de betrokkene bij klantcontact naar aanleiding van dat contact te versturen post wil ontvangen. Dit mag afwijken van
     * voor de verstrekker eventueel in een basisregistratie bekende adressen.
     * 
     * @return correspondentieadres
     **/
    public BetrokkeneCorrespondentieadres getCorrespondentieadres() {
        return correspondentieadres;
    }

    /**
     * Set correspondentieadres
     */
    public void setCorrespondentieadres(BetrokkeneCorrespondentieadres correspondentieadres) {
        this.correspondentieadres = correspondentieadres;
    }

    public ExpandBetrokkene correspondentieadres(BetrokkeneCorrespondentieadres correspondentieadres) {
        this.correspondentieadres = correspondentieadres;
        return this;
    }

    /**
     * Naam die de betrokkene bij klantcontact tijdens vervolghandelingen naar aanleiding van dat contact wil gebruiken. Deze mag afwijken
     * van eventueel in de Basisregistratie Personen (BRP) bekende naam van de betrokkene.
     * 
     * @return contactnaam
     **/
    public Contactnaam getContactnaam() {
        return contactnaam;
    }

    /**
     * Set contactnaam
     */
    public void setContactnaam(Contactnaam contactnaam) {
        this.contactnaam = contactnaam;
    }

    public ExpandBetrokkene contactnaam(Contactnaam contactnaam) {
        this.contactnaam = contactnaam;
        return this;
    }

    /**
     * De voledige naam van de betrokkene.
     * 
     * @return volledigeNaam
     **/
    public String getVolledigeNaam() {
        return volledigeNaam;
    }


    /**
     * Rol die de betrokkene bij klantcontact tijdens dat contact vervulde.
     * 
     * @return rol
     **/
    public RolEnum getRol() {
        return rol;
    }

    /**
     * Set rol
     */
    public void setRol(RolEnum rol) {
        this.rol = rol;
    }

    public ExpandBetrokkene rol(RolEnum rol) {
        this.rol = rol;
        return this;
    }

    /**
     * Naam van de organisatie waarmee de betrokkene bij klantcontact een relatie had.
     * 
     * @return organisatienaam
     **/
    public String getOrganisatienaam() {
        return organisatienaam;
    }

    /**
     * Set organisatienaam
     */
    public void setOrganisatienaam(String organisatienaam) {
        this.organisatienaam = organisatienaam;
    }

    public ExpandBetrokkene organisatienaam(String organisatienaam) {
        this.organisatienaam = organisatienaam;
        return this;
    }

    /**
     * Get initiator
     * 
     * @return initiator
     **/
    public Boolean getInitiator() {
        return initiator;
    }

    /**
     * Set initiator
     */
    public void setInitiator(Boolean initiator) {
        this.initiator = initiator;
    }

    public ExpandBetrokkene initiator(Boolean initiator) {
        this.initiator = initiator;
        return this;
    }

    /**
     * Get expand
     * 
     * @return expand
     **/
    public ExpandBetrokkeneAllOfExpand getExpand() {
        return expand;
    }

    /**
     * Set expand
     */
    public void setExpand(ExpandBetrokkeneAllOfExpand expand) {
        this.expand = expand;
    }

    public ExpandBetrokkene expand(ExpandBetrokkeneAllOfExpand expand) {
        this.expand = expand;
        return this;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ExpandBetrokkene expandBetrokkene = (ExpandBetrokkene) o;
        return Objects.equals(this.uuid, expandBetrokkene.uuid) &&
               Objects.equals(this.url, expandBetrokkene.url) &&
               Objects.equals(this.wasPartij, expandBetrokkene.wasPartij) &&
               Objects.equals(this.hadKlantcontact, expandBetrokkene.hadKlantcontact) &&
               Objects.equals(this.digitaleAdressen, expandBetrokkene.digitaleAdressen) &&
               Objects.equals(this.bezoekadres, expandBetrokkene.bezoekadres) &&
               Objects.equals(this.correspondentieadres, expandBetrokkene.correspondentieadres) &&
               Objects.equals(this.contactnaam, expandBetrokkene.contactnaam) &&
               Objects.equals(this.volledigeNaam, expandBetrokkene.volledigeNaam) &&
               Objects.equals(this.rol, expandBetrokkene.rol) &&
               Objects.equals(this.organisatienaam, expandBetrokkene.organisatienaam) &&
               Objects.equals(this.initiator, expandBetrokkene.initiator) &&
               Objects.equals(this.expand, expandBetrokkene.expand);
    }

    @Override
    public int hashCode() {
        return Objects.hash(uuid, url, wasPartij, hadKlantcontact, digitaleAdressen, bezoekadres, correspondentieadres, contactnaam,
                volledigeNaam, rol, organisatienaam, initiator, expand);
    }

    /**
     * Create a string representation of this pojo.
     */
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ExpandBetrokkene {\n");

        sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
        sb.append("    url: ").append(toIndentedString(url)).append("\n");
        sb.append("    wasPartij: ").append(toIndentedString(wasPartij)).append("\n");
        sb.append("    hadKlantcontact: ").append(toIndentedString(hadKlantcontact)).append("\n");
        sb.append("    digitaleAdressen: ").append(toIndentedString(digitaleAdressen)).append("\n");
        sb.append("    bezoekadres: ").append(toIndentedString(bezoekadres)).append("\n");
        sb.append("    correspondentieadres: ").append(toIndentedString(correspondentieadres)).append("\n");
        sb.append("    contactnaam: ").append(toIndentedString(contactnaam)).append("\n");
        sb.append("    volledigeNaam: ").append(toIndentedString(volledigeNaam)).append("\n");
        sb.append("    rol: ").append(toIndentedString(rol)).append("\n");
        sb.append("    organisatienaam: ").append(toIndentedString(organisatienaam)).append("\n");
        sb.append("    initiator: ").append(toIndentedString(initiator)).append("\n");
        sb.append("    expand: ").append(toIndentedString(expand)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private static String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
