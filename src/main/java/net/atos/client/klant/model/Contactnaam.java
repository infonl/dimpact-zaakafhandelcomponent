/*
 * SPDX-FileCopyrightText: 2024 Lifely
 * SPDX-License-Identifier: EUPL-1.2+
 */

/**
 * klantinteracties
 * **Warning: Difference between `PUT` and `PATCH`** Both `PUT` and `PATCH` methods can be used to update the fields in a resource, but
 * there is a key difference in how they handle required fields: * The `PUT` method requires you to specify **all mandatory fields** when
 * updating a resource. If any mandatory field is missing, the update will fail. Optional fields are left unchanged if they are not
 * specified. * The `PATCH` method, on the other hand, allows you to update only the fields you specify. Some mandatory fields can be left
 * out, and the resource will only be updated with the provided data, leaving other fields unchanged.
 *
 * The version of the OpenAPI document: 0.1.2 (1)
 * Contact: standaarden.ondersteuning@vng.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.atos.client.klant.model;

import java.util.Objects;

import jakarta.json.bind.annotation.JsonbProperty;


public class Contactnaam {

    /**
     * Een afkorting van de voornamen. Meestal de beginletter, maar in sommige gevallen de beginletter gecombineerd met de tweede letter van
     * een voornaam.
     */
    @JsonbProperty("voorletters")
    protected String voorletters;

    /**
     * De voornaam die de persoon wil gebruiken tijdens communicatie met de gemeente.
     */
    @JsonbProperty("voornaam")
    protected String voornaam;

    /**
     * Een eventueel voorvoegsel dat hoort bij de achternaam die de persoon wil gebruiken tijdens communicatie met de gemeente.
     */
    @JsonbProperty("voorvoegselAchternaam")
    protected String voorvoegselAchternaam;

    /**
     * Een achternaam die de persoon wil gebruiken tijdens communicatie met de gemeente.
     */
    @JsonbProperty("achternaam")
    protected String achternaam;

    /**
     * Een afkorting van de voornamen. Meestal de beginletter, maar in sommige gevallen de beginletter gecombineerd met de tweede letter van
     * een voornaam.
     * 
     * @return voorletters
     **/
    public String getVoorletters() {
        return voorletters;
    }

    /**
     * Set voorletters
     */
    public void setVoorletters(String voorletters) {
        this.voorletters = voorletters;
    }

    public Contactnaam voorletters(String voorletters) {
        this.voorletters = voorletters;
        return this;
    }

    /**
     * De voornaam die de persoon wil gebruiken tijdens communicatie met de gemeente.
     * 
     * @return voornaam
     **/
    public String getVoornaam() {
        return voornaam;
    }

    /**
     * Set voornaam
     */
    public void setVoornaam(String voornaam) {
        this.voornaam = voornaam;
    }

    public Contactnaam voornaam(String voornaam) {
        this.voornaam = voornaam;
        return this;
    }

    /**
     * Een eventueel voorvoegsel dat hoort bij de achternaam die de persoon wil gebruiken tijdens communicatie met de gemeente.
     * 
     * @return voorvoegselAchternaam
     **/
    public String getVoorvoegselAchternaam() {
        return voorvoegselAchternaam;
    }

    /**
     * Set voorvoegselAchternaam
     */
    public void setVoorvoegselAchternaam(String voorvoegselAchternaam) {
        this.voorvoegselAchternaam = voorvoegselAchternaam;
    }

    public Contactnaam voorvoegselAchternaam(String voorvoegselAchternaam) {
        this.voorvoegselAchternaam = voorvoegselAchternaam;
        return this;
    }

    /**
     * Een achternaam die de persoon wil gebruiken tijdens communicatie met de gemeente.
     * 
     * @return achternaam
     **/
    public String getAchternaam() {
        return achternaam;
    }

    /**
     * Set achternaam
     */
    public void setAchternaam(String achternaam) {
        this.achternaam = achternaam;
    }

    public Contactnaam achternaam(String achternaam) {
        this.achternaam = achternaam;
        return this;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Contactnaam contactnaam = (Contactnaam) o;
        return Objects.equals(this.voorletters, contactnaam.voorletters) &&
               Objects.equals(this.voornaam, contactnaam.voornaam) &&
               Objects.equals(this.voorvoegselAchternaam, contactnaam.voorvoegselAchternaam) &&
               Objects.equals(this.achternaam, contactnaam.achternaam);
    }

    @Override
    public int hashCode() {
        return Objects.hash(voorletters, voornaam, voorvoegselAchternaam, achternaam);
    }

    /**
     * Create a string representation of this pojo.
     */
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Contactnaam {\n");

        sb.append("    voorletters: ").append(toIndentedString(voorletters)).append("\n");
        sb.append("    voornaam: ").append(toIndentedString(voornaam)).append("\n");
        sb.append("    voorvoegselAchternaam: ").append(toIndentedString(voorvoegselAchternaam)).append("\n");
        sb.append("    achternaam: ").append(toIndentedString(achternaam)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private static String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
