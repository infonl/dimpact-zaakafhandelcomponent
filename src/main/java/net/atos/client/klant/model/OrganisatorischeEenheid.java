/*
 * SPDX-FileCopyrightText: 2025 Lifely
 * SPDX-License-Identifier: EUPL-1.2+
 */

/**
 * klantinteracties
 * **Warning: Difference between `PUT` and `PATCH`** Both `PUT` and `PATCH` methods can be used to update the fields in a resource, but
 * there is a key difference in how they handle required fields: * The `PUT` method requires you to specify **all mandatory fields** when
 * updating a resource. If any mandatory field is missing, the update will fail. Optional fields are left unchanged if they are not
 * specified. * The `PATCH` method, on the other hand, allows you to update only the fields you specify. Some mandatory fields can be left
 * out, and the resource will only be updated with the provided data, leaving other fields unchanged.
 *
 * The version of the OpenAPI document: 0.1.2 (1)
 * Contact: standaarden.ondersteuning@vng.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.atos.client.klant.model;

import java.util.Objects;

import jakarta.json.bind.annotation.JsonbProperty;


public class OrganisatorischeEenheid {

    /**
     * Omschrijving van de geautomatiseerde actor.
     */
    @JsonbProperty("omschrijving")
    protected String omschrijving;

    /**
     * Elektronisch postadres waaronder de MEDEWERKER in de regel bereikbaar is.
     */
    @JsonbProperty("emailadres")
    protected String emailadres;

    /**
     * Faxnummer waaronder de organisatorische eenheid in de regel bereikbaar is.
     */
    @JsonbProperty("faxnummer")
    protected String faxnummer;

    /**
     * Telefoonnummer waaronder de MEDEWERKER in de regel bereikbaar is.
     */
    @JsonbProperty("telefoonnummer")
    protected String telefoonnummer;

    /**
     * Omschrijving van de geautomatiseerde actor.
     * 
     * @return omschrijving
     **/
    public String getOmschrijving() {
        return omschrijving;
    }

    /**
     * Set omschrijving
     */
    public void setOmschrijving(String omschrijving) {
        this.omschrijving = omschrijving;
    }

    public OrganisatorischeEenheid omschrijving(String omschrijving) {
        this.omschrijving = omschrijving;
        return this;
    }

    /**
     * Elektronisch postadres waaronder de MEDEWERKER in de regel bereikbaar is.
     * 
     * @return emailadres
     **/
    public String getEmailadres() {
        return emailadres;
    }

    /**
     * Set emailadres
     */
    public void setEmailadres(String emailadres) {
        this.emailadres = emailadres;
    }

    public OrganisatorischeEenheid emailadres(String emailadres) {
        this.emailadres = emailadres;
        return this;
    }

    /**
     * Faxnummer waaronder de organisatorische eenheid in de regel bereikbaar is.
     * 
     * @return faxnummer
     **/
    public String getFaxnummer() {
        return faxnummer;
    }

    /**
     * Set faxnummer
     */
    public void setFaxnummer(String faxnummer) {
        this.faxnummer = faxnummer;
    }

    public OrganisatorischeEenheid faxnummer(String faxnummer) {
        this.faxnummer = faxnummer;
        return this;
    }

    /**
     * Telefoonnummer waaronder de MEDEWERKER in de regel bereikbaar is.
     * 
     * @return telefoonnummer
     **/
    public String getTelefoonnummer() {
        return telefoonnummer;
    }

    /**
     * Set telefoonnummer
     */
    public void setTelefoonnummer(String telefoonnummer) {
        this.telefoonnummer = telefoonnummer;
    }

    public OrganisatorischeEenheid telefoonnummer(String telefoonnummer) {
        this.telefoonnummer = telefoonnummer;
        return this;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OrganisatorischeEenheid organisatorischeEenheid = (OrganisatorischeEenheid) o;
        return Objects.equals(this.omschrijving, organisatorischeEenheid.omschrijving) &&
               Objects.equals(this.emailadres, organisatorischeEenheid.emailadres) &&
               Objects.equals(this.faxnummer, organisatorischeEenheid.faxnummer) &&
               Objects.equals(this.telefoonnummer, organisatorischeEenheid.telefoonnummer);
    }

    @Override
    public int hashCode() {
        return Objects.hash(omschrijving, emailadres, faxnummer, telefoonnummer);
    }

    /**
     * Create a string representation of this pojo.
     */
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class OrganisatorischeEenheid {\n");

        sb.append("    omschrijving: ").append(toIndentedString(omschrijving)).append("\n");
        sb.append("    emailadres: ").append(toIndentedString(emailadres)).append("\n");
        sb.append("    faxnummer: ").append(toIndentedString(faxnummer)).append("\n");
        sb.append("    telefoonnummer: ").append(toIndentedString(telefoonnummer)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private static String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
