/*
 * SPDX-FileCopyrightText: 2025 Lifely
 * SPDX-License-Identifier: EUPL-1.2+
 */

/**
 * klantinteracties
 * **Warning: Difference between `PUT` and `PATCH`** Both `PUT` and `PATCH` methods can be used to update the fields in a resource, but
 * there is a key difference in how they handle required fields: * The `PUT` method requires you to specify **all mandatory fields** when
 * updating a resource. If any mandatory field is missing, the update will fail. Optional fields are left unchanged if they are not
 * specified. * The `PATCH` method, on the other hand, allows you to update only the fields you specify. Some mandatory fields can be left
 * out, and the resource will only be updated with the provided data, leaving other fields unchanged.
 *
 * The version of the OpenAPI document: 0.1.2 (1)
 * Contact: standaarden.ondersteuning@vng.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.atos.client.klant.model;

import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.UUID;

import jakarta.json.bind.annotation.JsonbCreator;
import jakarta.json.bind.annotation.JsonbProperty;


public class PatchedInterneTaak {

    /**
     * Unieke (technische) identificatiecode van de interne taak.
     */
    @JsonbProperty("uuid")
    protected UUID uuid;

    /**
     * De unieke URL van deze interne taak binnen deze API.
     */
    @JsonbProperty("url")
    protected URI url;

    /**
     * Uniek identificerend nummer dat tijdens communicatie tussen mensen kan worden gebruikt om de specifieke interne taak aan te duiden.
     */
    @JsonbProperty("nummer")
    protected String nummer;

    /**
     * Handeling die moet worden uitgevoerd om de taak af te ronden.
     */
    @JsonbProperty("gevraagdeHandeling")
    protected String gevraagdeHandeling;

    /**
     * Klantcontact dat leidde tot een interne taak.
     */
    @JsonbProperty("aanleidinggevendKlantcontact")
    protected KlantcontactForeignKey aanleidinggevendKlantcontact;

    /**
     * Eerste actor die een interne taak toegewezen kreeg.
     */
    @JsonbProperty("toegewezenAanActor")
    protected ActorForeignKey toegewezenAanActor;

    /**
     * Actoren die een interne taak toegewezen kreeg.
     */
    @JsonbProperty("toegewezenAanActoren")
    protected List<ActorForeignKey> toegewezenAanActoren = null;

    /**
     * Toelichting die, aanvullend bij de inhoud van het klantcontact dat aanleiding gaf tot de taak en de gevraagde handeling, bijdraagt
     * aan het kunnen afhandelen van de taak.
     */
    @JsonbProperty("toelichting")
    protected String toelichting;

    /**
     * Aanduiding van de vordering bij afhandeling van de interne taak.
     */
    @JsonbProperty("status")
    protected StatusEnum status;

    /**
     * Datum en tijdstip waarop de interne taak aan een actor werd toegewezen.
     */
    @JsonbProperty("toegewezenOp")
    protected OffsetDateTime toegewezenOp;

    /**
     * Datum en tijdstip wanneer de interne taak was afgehandeld: EXPERIMENTEEL.
     */
    @JsonbProperty("afgehandeldOp")
    protected OffsetDateTime afgehandeldOp;

    public PatchedInterneTaak() {
    }

    @JsonbCreator
    public PatchedInterneTaak(
            @JsonbProperty(value = "uuid", nillable = true) UUID uuid,
            @JsonbProperty(value = "url", nillable = true) URI url,
            @JsonbProperty(value = "toegewezenOp", nillable = true) OffsetDateTime toegewezenOp
    ) {
        this.uuid = uuid;
        this.url = url;
        this.toegewezenOp = toegewezenOp;
    }

    /**
     * Unieke (technische) identificatiecode van de interne taak.
     * 
     * @return uuid
     **/
    public UUID getUuid() {
        return uuid;
    }


    /**
     * De unieke URL van deze interne taak binnen deze API.
     * 
     * @return url
     **/
    public URI getUrl() {
        return url;
    }


    /**
     * Uniek identificerend nummer dat tijdens communicatie tussen mensen kan worden gebruikt om de specifieke interne taak aan te duiden.
     * 
     * @return nummer
     **/
    public String getNummer() {
        return nummer;
    }

    /**
     * Set nummer
     */
    public void setNummer(String nummer) {
        this.nummer = nummer;
    }

    public PatchedInterneTaak nummer(String nummer) {
        this.nummer = nummer;
        return this;
    }

    /**
     * Handeling die moet worden uitgevoerd om de taak af te ronden.
     * 
     * @return gevraagdeHandeling
     **/
    public String getGevraagdeHandeling() {
        return gevraagdeHandeling;
    }

    /**
     * Set gevraagdeHandeling
     */
    public void setGevraagdeHandeling(String gevraagdeHandeling) {
        this.gevraagdeHandeling = gevraagdeHandeling;
    }

    public PatchedInterneTaak gevraagdeHandeling(String gevraagdeHandeling) {
        this.gevraagdeHandeling = gevraagdeHandeling;
        return this;
    }

    /**
     * Klantcontact dat leidde tot een interne taak.
     * 
     * @return aanleidinggevendKlantcontact
     **/
    public KlantcontactForeignKey getAanleidinggevendKlantcontact() {
        return aanleidinggevendKlantcontact;
    }

    /**
     * Set aanleidinggevendKlantcontact
     */
    public void setAanleidinggevendKlantcontact(KlantcontactForeignKey aanleidinggevendKlantcontact) {
        this.aanleidinggevendKlantcontact = aanleidinggevendKlantcontact;
    }

    public PatchedInterneTaak aanleidinggevendKlantcontact(KlantcontactForeignKey aanleidinggevendKlantcontact) {
        this.aanleidinggevendKlantcontact = aanleidinggevendKlantcontact;
        return this;
    }

    /**
     * Eerste actor die een interne taak toegewezen kreeg.
     * 
     * @return toegewezenAanActor
     * @deprecated
     **/
    @Deprecated
    public ActorForeignKey getToegewezenAanActor() {
        return toegewezenAanActor;
    }

    /**
     * Set toegewezenAanActor
     */
    public void setToegewezenAanActor(ActorForeignKey toegewezenAanActor) {
        this.toegewezenAanActor = toegewezenAanActor;
    }

    public PatchedInterneTaak toegewezenAanActor(ActorForeignKey toegewezenAanActor) {
        this.toegewezenAanActor = toegewezenAanActor;
        return this;
    }

    /**
     * Actoren die een interne taak toegewezen kreeg.
     * 
     * @return toegewezenAanActoren
     **/
    public List<ActorForeignKey> getToegewezenAanActoren() {
        return toegewezenAanActoren;
    }

    /**
     * Set toegewezenAanActoren
     */
    public void setToegewezenAanActoren(List<ActorForeignKey> toegewezenAanActoren) {
        this.toegewezenAanActoren = toegewezenAanActoren;
    }

    public PatchedInterneTaak toegewezenAanActoren(List<ActorForeignKey> toegewezenAanActoren) {
        this.toegewezenAanActoren = toegewezenAanActoren;
        return this;
    }

    public PatchedInterneTaak addToegewezenAanActorenItem(ActorForeignKey toegewezenAanActorenItem) {
        if (this.toegewezenAanActoren == null) {
            this.toegewezenAanActoren = new ArrayList<>();
        }
        this.toegewezenAanActoren.add(toegewezenAanActorenItem);
        return this;
    }

    /**
     * Toelichting die, aanvullend bij de inhoud van het klantcontact dat aanleiding gaf tot de taak en de gevraagde handeling, bijdraagt
     * aan het kunnen afhandelen van de taak.
     * 
     * @return toelichting
     **/
    public String getToelichting() {
        return toelichting;
    }

    /**
     * Set toelichting
     */
    public void setToelichting(String toelichting) {
        this.toelichting = toelichting;
    }

    public PatchedInterneTaak toelichting(String toelichting) {
        this.toelichting = toelichting;
        return this;
    }

    /**
     * Aanduiding van de vordering bij afhandeling van de interne taak.
     * 
     * @return status
     **/
    public StatusEnum getStatus() {
        return status;
    }

    /**
     * Set status
     */
    public void setStatus(StatusEnum status) {
        this.status = status;
    }

    public PatchedInterneTaak status(StatusEnum status) {
        this.status = status;
        return this;
    }

    /**
     * Datum en tijdstip waarop de interne taak aan een actor werd toegewezen.
     * 
     * @return toegewezenOp
     **/
    public OffsetDateTime getToegewezenOp() {
        return toegewezenOp;
    }


    /**
     * Datum en tijdstip wanneer de interne taak was afgehandeld: EXPERIMENTEEL.
     * 
     * @return afgehandeldOp
     **/
    public OffsetDateTime getAfgehandeldOp() {
        return afgehandeldOp;
    }

    /**
     * Set afgehandeldOp
     */
    public void setAfgehandeldOp(OffsetDateTime afgehandeldOp) {
        this.afgehandeldOp = afgehandeldOp;
    }

    public PatchedInterneTaak afgehandeldOp(OffsetDateTime afgehandeldOp) {
        this.afgehandeldOp = afgehandeldOp;
        return this;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PatchedInterneTaak patchedInterneTaak = (PatchedInterneTaak) o;
        return Objects.equals(this.uuid, patchedInterneTaak.uuid) &&
               Objects.equals(this.url, patchedInterneTaak.url) &&
               Objects.equals(this.nummer, patchedInterneTaak.nummer) &&
               Objects.equals(this.gevraagdeHandeling, patchedInterneTaak.gevraagdeHandeling) &&
               Objects.equals(this.aanleidinggevendKlantcontact, patchedInterneTaak.aanleidinggevendKlantcontact) &&
               Objects.equals(this.toegewezenAanActor, patchedInterneTaak.toegewezenAanActor) &&
               Objects.equals(this.toegewezenAanActoren, patchedInterneTaak.toegewezenAanActoren) &&
               Objects.equals(this.toelichting, patchedInterneTaak.toelichting) &&
               Objects.equals(this.status, patchedInterneTaak.status) &&
               Objects.equals(this.toegewezenOp, patchedInterneTaak.toegewezenOp) &&
               Objects.equals(this.afgehandeldOp, patchedInterneTaak.afgehandeldOp);
    }

    @Override
    public int hashCode() {
        return Objects.hash(uuid, url, nummer, gevraagdeHandeling, aanleidinggevendKlantcontact, toegewezenAanActor, toegewezenAanActoren,
                toelichting, status, toegewezenOp, afgehandeldOp);
    }

    /**
     * Create a string representation of this pojo.
     */
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class PatchedInterneTaak {\n");

        sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
        sb.append("    url: ").append(toIndentedString(url)).append("\n");
        sb.append("    nummer: ").append(toIndentedString(nummer)).append("\n");
        sb.append("    gevraagdeHandeling: ").append(toIndentedString(gevraagdeHandeling)).append("\n");
        sb.append("    aanleidinggevendKlantcontact: ").append(toIndentedString(aanleidinggevendKlantcontact)).append("\n");
        sb.append("    toegewezenAanActor: ").append(toIndentedString(toegewezenAanActor)).append("\n");
        sb.append("    toegewezenAanActoren: ").append(toIndentedString(toegewezenAanActoren)).append("\n");
        sb.append("    toelichting: ").append(toIndentedString(toelichting)).append("\n");
        sb.append("    status: ").append(toIndentedString(status)).append("\n");
        sb.append("    toegewezenOp: ").append(toIndentedString(toegewezenOp)).append("\n");
        sb.append("    afgehandeldOp: ").append(toIndentedString(afgehandeldOp)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private static String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
