/*
 * SPDX-FileCopyrightText: 2025 Lifely
 * SPDX-License-Identifier: EUPL-1.2+
 */

/**
 * klantinteracties
 * **Warning: Difference between `PUT` and `PATCH`** Both `PUT` and `PATCH` methods can be used to update the fields in a resource, but
 * there is a key difference in how they handle required fields: * The `PUT` method requires you to specify **all mandatory fields** when
 * updating a resource. If any mandatory field is missing, the update will fail. Optional fields are left unchanged if they are not
 * specified. * The `PATCH` method, on the other hand, allows you to update only the fields you specify. Some mandatory fields can be left
 * out, and the resource will only be updated with the provided data, leaving other fields unchanged.
 *
 * The version of the OpenAPI document: 0.1.2 (1)
 * Contact: standaarden.ondersteuning@vng.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.atos.client.klant.model;

import java.util.Objects;

import jakarta.json.bind.annotation.JsonbProperty;


public class PartijCorrespondentieadres {

    /**
     * Identificatie van het adres bij de Basisregistratie Adressen en Gebouwen.
     */
    @JsonbProperty("nummeraanduidingId")
    protected String nummeraanduidingId;

    /**
     * Straatnaam van het adres (indien het een Nederlands adres betreft zonder BAG-id).
     */
    @JsonbProperty("straatnaam")
    protected String straatnaam;

    /**
     * Huisnummer van het adres (indien het een Nederlands adres betreft zonder BAG-id).
     */
    @JsonbProperty("huisnummer")
    protected Integer huisnummer;

    /**
     * Huisnummertoevoeging van het adres (indien het een Nederlands adres betreft zonder BAG-id).
     */
    @JsonbProperty("huisnummertoevoeging")
    protected String huisnummertoevoeging;

    /**
     * Postcode van het adres (indien het een Nederlands adres betreft zonder BAG-id).
     */
    @JsonbProperty("postcode")
    protected String postcode;

    /**
     * Stad van het adres (indien het een Nederlands adres betreft zonder BAG-id).
     */
    @JsonbProperty("stad")
    protected String stad;

    /**
     * Eerste deel van het adres dat niet voorkomt in de Basisregistratie Adressen en Gebouwen.
     */
    @JsonbProperty("adresregel1")
    protected String adresregel1;

    /**
     * Tweede deel van het adres dat niet voorkomt in de Basisregistratie Adressen en Gebouwen.
     */
    @JsonbProperty("adresregel2")
    protected String adresregel2;

    /**
     * Derde deel van het adres dat niet voorkomt in de Basisregistratie Adressen en Gebouwen.
     */
    @JsonbProperty("adresregel3")
    protected String adresregel3;

    /**
     * ISO 3166-code die het land (buiten Nederland) aangeeft alwaar de ingeschrevene verblijft.
     */
    @JsonbProperty("land")
    protected String land;

    /**
     * Identificatie van het adres bij de Basisregistratie Adressen en Gebouwen.
     * 
     * @return nummeraanduidingId
     **/
    public String getNummeraanduidingId() {
        return nummeraanduidingId;
    }

    /**
     * Set nummeraanduidingId
     */
    public void setNummeraanduidingId(String nummeraanduidingId) {
        this.nummeraanduidingId = nummeraanduidingId;
    }

    public PartijCorrespondentieadres nummeraanduidingId(String nummeraanduidingId) {
        this.nummeraanduidingId = nummeraanduidingId;
        return this;
    }

    /**
     * Straatnaam van het adres (indien het een Nederlands adres betreft zonder BAG-id).
     * 
     * @return straatnaam
     **/
    public String getStraatnaam() {
        return straatnaam;
    }

    /**
     * Set straatnaam
     */
    public void setStraatnaam(String straatnaam) {
        this.straatnaam = straatnaam;
    }

    public PartijCorrespondentieadres straatnaam(String straatnaam) {
        this.straatnaam = straatnaam;
        return this;
    }

    /**
     * Huisnummer van het adres (indien het een Nederlands adres betreft zonder BAG-id).
     * minimum: 1
     * maximum: 99999
     * 
     * @return huisnummer
     **/
    public Integer getHuisnummer() {
        return huisnummer;
    }

    /**
     * Set huisnummer
     */
    public void setHuisnummer(Integer huisnummer) {
        this.huisnummer = huisnummer;
    }

    public PartijCorrespondentieadres huisnummer(Integer huisnummer) {
        this.huisnummer = huisnummer;
        return this;
    }

    /**
     * Huisnummertoevoeging van het adres (indien het een Nederlands adres betreft zonder BAG-id).
     * 
     * @return huisnummertoevoeging
     **/
    public String getHuisnummertoevoeging() {
        return huisnummertoevoeging;
    }

    /**
     * Set huisnummertoevoeging
     */
    public void setHuisnummertoevoeging(String huisnummertoevoeging) {
        this.huisnummertoevoeging = huisnummertoevoeging;
    }

    public PartijCorrespondentieadres huisnummertoevoeging(String huisnummertoevoeging) {
        this.huisnummertoevoeging = huisnummertoevoeging;
        return this;
    }

    /**
     * Postcode van het adres (indien het een Nederlands adres betreft zonder BAG-id).
     * 
     * @return postcode
     **/
    public String getPostcode() {
        return postcode;
    }

    /**
     * Set postcode
     */
    public void setPostcode(String postcode) {
        this.postcode = postcode;
    }

    public PartijCorrespondentieadres postcode(String postcode) {
        this.postcode = postcode;
        return this;
    }

    /**
     * Stad van het adres (indien het een Nederlands adres betreft zonder BAG-id).
     * 
     * @return stad
     **/
    public String getStad() {
        return stad;
    }

    /**
     * Set stad
     */
    public void setStad(String stad) {
        this.stad = stad;
    }

    public PartijCorrespondentieadres stad(String stad) {
        this.stad = stad;
        return this;
    }

    /**
     * Eerste deel van het adres dat niet voorkomt in de Basisregistratie Adressen en Gebouwen.
     * 
     * @return adresregel1
     **/
    public String getAdresregel1() {
        return adresregel1;
    }

    /**
     * Set adresregel1
     */
    public void setAdresregel1(String adresregel1) {
        this.adresregel1 = adresregel1;
    }

    public PartijCorrespondentieadres adresregel1(String adresregel1) {
        this.adresregel1 = adresregel1;
        return this;
    }

    /**
     * Tweede deel van het adres dat niet voorkomt in de Basisregistratie Adressen en Gebouwen.
     * 
     * @return adresregel2
     **/
    public String getAdresregel2() {
        return adresregel2;
    }

    /**
     * Set adresregel2
     */
    public void setAdresregel2(String adresregel2) {
        this.adresregel2 = adresregel2;
    }

    public PartijCorrespondentieadres adresregel2(String adresregel2) {
        this.adresregel2 = adresregel2;
        return this;
    }

    /**
     * Derde deel van het adres dat niet voorkomt in de Basisregistratie Adressen en Gebouwen.
     * 
     * @return adresregel3
     **/
    public String getAdresregel3() {
        return adresregel3;
    }

    /**
     * Set adresregel3
     */
    public void setAdresregel3(String adresregel3) {
        this.adresregel3 = adresregel3;
    }

    public PartijCorrespondentieadres adresregel3(String adresregel3) {
        this.adresregel3 = adresregel3;
        return this;
    }

    /**
     * ISO 3166-code die het land (buiten Nederland) aangeeft alwaar de ingeschrevene verblijft.
     * 
     * @return land
     **/
    public String getLand() {
        return land;
    }

    /**
     * Set land
     */
    public void setLand(String land) {
        this.land = land;
    }

    public PartijCorrespondentieadres land(String land) {
        this.land = land;
        return this;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PartijCorrespondentieadres partijCorrespondentieadres = (PartijCorrespondentieadres) o;
        return Objects.equals(this.nummeraanduidingId, partijCorrespondentieadres.nummeraanduidingId) &&
               Objects.equals(this.straatnaam, partijCorrespondentieadres.straatnaam) &&
               Objects.equals(this.huisnummer, partijCorrespondentieadres.huisnummer) &&
               Objects.equals(this.huisnummertoevoeging, partijCorrespondentieadres.huisnummertoevoeging) &&
               Objects.equals(this.postcode, partijCorrespondentieadres.postcode) &&
               Objects.equals(this.stad, partijCorrespondentieadres.stad) &&
               Objects.equals(this.adresregel1, partijCorrespondentieadres.adresregel1) &&
               Objects.equals(this.adresregel2, partijCorrespondentieadres.adresregel2) &&
               Objects.equals(this.adresregel3, partijCorrespondentieadres.adresregel3) &&
               Objects.equals(this.land, partijCorrespondentieadres.land);
    }

    @Override
    public int hashCode() {
        return Objects.hash(nummeraanduidingId, straatnaam, huisnummer, huisnummertoevoeging, postcode, stad, adresregel1, adresregel2,
                adresregel3, land);
    }

    /**
     * Create a string representation of this pojo.
     */
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class PartijCorrespondentieadres {\n");

        sb.append("    nummeraanduidingId: ").append(toIndentedString(nummeraanduidingId)).append("\n");
        sb.append("    straatnaam: ").append(toIndentedString(straatnaam)).append("\n");
        sb.append("    huisnummer: ").append(toIndentedString(huisnummer)).append("\n");
        sb.append("    huisnummertoevoeging: ").append(toIndentedString(huisnummertoevoeging)).append("\n");
        sb.append("    postcode: ").append(toIndentedString(postcode)).append("\n");
        sb.append("    stad: ").append(toIndentedString(stad)).append("\n");
        sb.append("    adresregel1: ").append(toIndentedString(adresregel1)).append("\n");
        sb.append("    adresregel2: ").append(toIndentedString(adresregel2)).append("\n");
        sb.append("    adresregel3: ").append(toIndentedString(adresregel3)).append("\n");
        sb.append("    land: ").append(toIndentedString(land)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private static String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
