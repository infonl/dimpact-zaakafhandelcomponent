/**
 * klantinteracties
 * **Warning: Difference between `PUT` and `PATCH`** Both `PUT` and `PATCH` methods can be used to update the fields in a resource, but
 * there is a key difference in how they handle required fields: * The `PUT` method requires you to specify **all mandatory fields** when
 * updating a resource. If any mandatory field is missing, the update will fail. Optional fields are left unchanged if they are not
 * specified. * The `PATCH` method, on the other hand, allows you to update only the fields you specify. Some mandatory fields can be left
 * out, and the resource will only be updated with the provided data, leaving other fields unchanged.
 *
 * The version of the OpenAPI document: 0.1.2 (1)
 * Contact: standaarden.ondersteuning@vng.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.atos.client.klant.model;

import java.util.Objects;
import java.util.UUID;

import jakarta.json.bind.annotation.JsonbCreator;
import jakarta.json.bind.annotation.JsonbProperty;


/**
 * Set gegevensgroepdata from validated nested data. Usage: include the mixin on the ModelSerializer that has gegevensgroepen.
 */

public class Contactpersoon {

    /**
     * Unieke (technische) identificatiecode van de contactpersoon.
     */
    @JsonbProperty("uuid")
    protected UUID uuid;

    /**
     * Organisatie waarvoor een contactpersoon werkte.
     */
    @JsonbProperty("werkteVoorPartij")
    protected PartijPolymorphic werkteVoorPartij;

    /**
     * Naam die een contactpersoon wil gebruiken tijdens contact met de gemeente. Deze mag afwijken van de eventueel in de Basisregistratie
     * Personen (BRP) bekende naam van de contactpersoon.
     */
    @JsonbProperty("contactnaam")
    protected ContactpersoonPersoon contactnaam;

    /**
     * De voledige naam van het constact persoon.
     */
    @JsonbProperty("volledigeNaam")
    protected String volledigeNaam;

    public Contactpersoon() {
    }

    @JsonbCreator
    public Contactpersoon(
            @JsonbProperty(value = "volledigeNaam") String volledigeNaam
    ) {
        this.volledigeNaam = volledigeNaam;
    }

    /**
     * Unieke (technische) identificatiecode van de contactpersoon.
     * 
     * @return uuid
     **/
    public UUID getUuid() {
        return uuid;
    }

    /**
     * Set uuid
     */
    public void setUuid(UUID uuid) {
        this.uuid = uuid;
    }

    public Contactpersoon uuid(UUID uuid) {
        this.uuid = uuid;
        return this;
    }

    /**
     * Organisatie waarvoor een contactpersoon werkte.
     * 
     * @return werkteVoorPartij
     **/
    public PartijPolymorphic getWerkteVoorPartij() {
        return werkteVoorPartij;
    }

    /**
     * Set werkteVoorPartij
     */
    public void setWerkteVoorPartij(PartijPolymorphic werkteVoorPartij) {
        this.werkteVoorPartij = werkteVoorPartij;
    }

    public Contactpersoon werkteVoorPartij(PartijPolymorphic werkteVoorPartij) {
        this.werkteVoorPartij = werkteVoorPartij;
        return this;
    }

    /**
     * Naam die een contactpersoon wil gebruiken tijdens contact met de gemeente. Deze mag afwijken van de eventueel in de Basisregistratie
     * Personen (BRP) bekende naam van de contactpersoon.
     * 
     * @return contactnaam
     **/
    public ContactpersoonPersoon getContactnaam() {
        return contactnaam;
    }

    /**
     * Set contactnaam
     */
    public void setContactnaam(ContactpersoonPersoon contactnaam) {
        this.contactnaam = contactnaam;
    }

    public Contactpersoon contactnaam(ContactpersoonPersoon contactnaam) {
        this.contactnaam = contactnaam;
        return this;
    }

    /**
     * De voledige naam van het constact persoon.
     * 
     * @return volledigeNaam
     **/
    public String getVolledigeNaam() {
        return volledigeNaam;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Contactpersoon contactpersoon = (Contactpersoon) o;
        return Objects.equals(this.uuid, contactpersoon.uuid) &&
               Objects.equals(this.werkteVoorPartij, contactpersoon.werkteVoorPartij) &&
               Objects.equals(this.contactnaam, contactpersoon.contactnaam) &&
               Objects.equals(this.volledigeNaam, contactpersoon.volledigeNaam);
    }

    @Override
    public int hashCode() {
        return Objects.hash(uuid, werkteVoorPartij, contactnaam, volledigeNaam);
    }

    /**
     * Create a string representation of this pojo.
     */
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Contactpersoon {\n");

        sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
        sb.append("    werkteVoorPartij: ").append(toIndentedString(werkteVoorPartij)).append("\n");
        sb.append("    contactnaam: ").append(toIndentedString(contactnaam)).append("\n");
        sb.append("    volledigeNaam: ").append(toIndentedString(volledigeNaam)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private static String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
