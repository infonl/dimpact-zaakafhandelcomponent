/*
 * SPDX-FileCopyrightText: 2022 Atos
 * SPDX-License-Identifier: EUPL-1.2+
 */
package net.atos.zac.app.zaken.converter

import jakarta.inject.Inject
import net.atos.client.zgw.ztc.ZTCClientService
import net.atos.client.zgw.ztc.model.Afleidingswijze
import net.atos.client.zgw.ztc.model.generated.ResultaatType
import net.atos.zac.app.zaken.model.RESTResultaattype
import net.atos.zac.util.PeriodUtil
import net.atos.zac.util.UriUtil
import java.net.URI
import java.time.Period

class RESTResultaattypeConverter {
    @Inject
    private lateinit var ztcClientService: ZTCClientService

    fun convertResultaattype(resultaattype: ResultaatType): RESTResultaattype {
        val afleidingswijze = resultaattype.brondatumArchiefprocedure
            .afleidingswijze
        val restResultaattype = RESTResultaattype()
        restResultaattype.id = UriUtil.uuidFromURI(resultaattype.url)
        restResultaattype.naam = resultaattype.omschrijving
        // compare enum values and not the enums themselves because we have multiple functionally
        // identical enums in our Java client code generated by the OpenAPI Generator
        restResultaattype.vervaldatumBesluitVerplicht = Afleidingswijze.VERVALDATUM_BESLUIT.toValue() == afleidingswijze.value()
        restResultaattype.besluitVerplicht =
            Afleidingswijze.VERVALDATUM_BESLUIT.toValue() == afleidingswijze.value() ||
            Afleidingswijze.INGANGSDATUM_BESLUIT.toValue() == afleidingswijze.value()
        restResultaattype.archiefNominatie = resultaattype.archiefnominatie.name
        restResultaattype.toelichting = resultaattype.toelichting
        restResultaattype.naamGeneriek = resultaattype.omschrijvingGeneriek
        restResultaattype.archiefTermijn = PeriodUtil.format(Period.parse(resultaattype.archiefactietermijn))
        return restResultaattype
    }

    fun convertResultaattypeUri(resultaattypeURI: URI?): RESTResultaattype {
        return convertResultaattype(ztcClientService.readResultaattype(resultaattypeURI!!))
    }

    fun convertResultaattypes(resultaattypes: List<ResultaatType>): List<RESTResultaattype> {
        return resultaattypes.stream()
            .map { resultaattype -> this.convertResultaattype(resultaattype) }
            .toList()
    }
}
