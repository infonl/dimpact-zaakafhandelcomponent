/*
 * SPDX-FileCopyrightText: 2024 INFO.nl
 * SPDX-License-Identifier: EUPL-1.2+
 */

/**
 * klantinteracties
 * **Warning: Difference between `PUT` and `PATCH`** Both `PUT` and `PATCH` methods can be used to update the fields in a resource, but
 * there is a key difference in how they handle required fields: * The `PUT` method requires you to specify **all mandatory fields** when
 * updating a resource. If any mandatory field is missing, the update will fail. Optional fields are left unchanged if they are not
 * specified. * The `PATCH` method, on the other hand, allows you to update only the fields you specify. Some mandatory fields can be left
 * out, and the resource will only be updated with the provided data, leaving other fields unchanged.
 *
 * The version of the OpenAPI document: 0.1.2 (1)
 * Contact: standaarden.ondersteuning@vng.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package nl.info.client.klant.model;

import java.net.URI;
import java.util.Objects;
import java.util.UUID;

import jakarta.json.bind.annotation.JsonbCreator;
import jakarta.json.bind.annotation.JsonbProperty;


public class Rekeningnummer {

    /**
     * Unieke (technische) identificatiecode van de interne taak.
     */
    @JsonbProperty("uuid")
    protected UUID uuid;

    /**
     * De unieke URL van deze rekeningnummer binnen deze API.
     */
    @JsonbProperty("url")
    protected URI url;

    /**
     * Rekeningnummer van een partij
     */
    @JsonbProperty("partij")
    protected PartijForeignKey partij;

    /**
     * Het internationaal bankrekeningnummer, zoals dat door een bankinstelling als identificator aan een overeenkomst tussen de bank en een
     * of meer subjecten wordt toegekend, op basis waarvan het SUBJECT in de regel internationaal financieel communiceert.
     */
    @JsonbProperty("iban")
    protected String iban;

    /**
     * De unieke code van de bankinstelling waar het SUBJECT het bankrekeningnummer heeft waarmee het subject in de regel internationaal
     * financieel communiceert.
     */
    @JsonbProperty("bic")
    protected String bic;

    public Rekeningnummer() {
    }

    @JsonbCreator
    public Rekeningnummer(
            @JsonbProperty(value = "uuid") UUID uuid,
            @JsonbProperty(value = "url") URI url
    ) {
        this.uuid = uuid;
        this.url = url;
    }

    /**
     * Unieke (technische) identificatiecode van de interne taak.
     * 
     * @return uuid
     **/
    public UUID getUuid() {
        return uuid;
    }


    /**
     * De unieke URL van deze rekeningnummer binnen deze API.
     * 
     * @return url
     **/
    public URI getUrl() {
        return url;
    }


    /**
     * Rekeningnummer van een partij
     * 
     * @return partij
     **/
    public PartijForeignKey getPartij() {
        return partij;
    }

    /**
     * Set partij
     */
    public void setPartij(PartijForeignKey partij) {
        this.partij = partij;
    }

    public Rekeningnummer partij(PartijForeignKey partij) {
        this.partij = partij;
        return this;
    }

    /**
     * Het internationaal bankrekeningnummer, zoals dat door een bankinstelling als identificator aan een overeenkomst tussen de bank en een
     * of meer subjecten wordt toegekend, op basis waarvan het SUBJECT in de regel internationaal financieel communiceert.
     * 
     * @return iban
     **/
    public String getIban() {
        return iban;
    }

    /**
     * Set iban
     */
    public void setIban(String iban) {
        this.iban = iban;
    }

    public Rekeningnummer iban(String iban) {
        this.iban = iban;
        return this;
    }

    /**
     * De unieke code van de bankinstelling waar het SUBJECT het bankrekeningnummer heeft waarmee het subject in de regel internationaal
     * financieel communiceert.
     * 
     * @return bic
     **/
    public String getBic() {
        return bic;
    }

    /**
     * Set bic
     */
    public void setBic(String bic) {
        this.bic = bic;
    }

    public Rekeningnummer bic(String bic) {
        this.bic = bic;
        return this;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Rekeningnummer rekeningnummer = (Rekeningnummer) o;
        return Objects.equals(this.uuid, rekeningnummer.uuid) &&
               Objects.equals(this.url, rekeningnummer.url) &&
               Objects.equals(this.partij, rekeningnummer.partij) &&
               Objects.equals(this.iban, rekeningnummer.iban) &&
               Objects.equals(this.bic, rekeningnummer.bic);
    }

    @Override
    public int hashCode() {
        return Objects.hash(uuid, url, partij, iban, bic);
    }

    /**
     * Create a string representation of this pojo.
     */
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Rekeningnummer {\n");

        sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
        sb.append("    url: ").append(toIndentedString(url)).append("\n");
        sb.append("    partij: ").append(toIndentedString(partij)).append("\n");
        sb.append("    iban: ").append(toIndentedString(iban)).append("\n");
        sb.append("    bic: ").append(toIndentedString(bic)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private static String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
