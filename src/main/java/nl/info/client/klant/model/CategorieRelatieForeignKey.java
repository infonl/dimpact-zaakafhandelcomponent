/*
 * SPDX-FileCopyrightText: 2024 INFO.nl
 * SPDX-License-Identifier: EUPL-1.2+
 */

/**
 * klantinteracties
 * **Warning: Difference between `PUT` and `PATCH`** Both `PUT` and `PATCH` methods can be used to update the fields in a resource, but
 * there is a key difference in how they handle required fields: * The `PUT` method requires you to specify **all mandatory fields** when
 * updating a resource. If any mandatory field is missing, the update will fail. Optional fields are left unchanged if they are not
 * specified. * The `PATCH` method, on the other hand, allows you to update only the fields you specify. Some mandatory fields can be left
 * out, and the resource will only be updated with the provided data, leaving other fields unchanged.
 *
 * The version of the OpenAPI document: 0.1.2 (1)
 * Contact: standaarden.ondersteuning@vng.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package nl.info.client.klant.model;

import java.net.URI;
import java.time.LocalDate;
import java.util.Objects;
import java.util.UUID;

import jakarta.json.bind.annotation.JsonbCreator;
import jakarta.json.bind.annotation.JsonbProperty;


/**
 * Let op: Dit attribuut is EXPERIMENTEEL.
 */

public class CategorieRelatieForeignKey {

    /**
     * Unieke (technische) identificatiecode van de Categorie Relatie.
     */
    @JsonbProperty("uuid")
    protected UUID uuid;

    /**
     * De unieke URL van deze categorie binnen deze API.
     */
    @JsonbProperty("url")
    protected URI url;

    /**
     * De naam van de gelinkte categorie.
     */
    @JsonbProperty("categorieNaam")
    protected String categorieNaam;

    /**
     * Aanduiding van datum volgens de NEN-ISO 8601:2019-standaard. Een datum wordt genoteerd van het meest naar het minst significante
     * onderdeel. Een voorbeeld: 2022-02-21
     */
    @JsonbProperty("beginDatum")
    protected LocalDate beginDatum;

    /**
     * Aanduiding van datum volgens de NEN-ISO 8601:2019-standaard. Een datum wordt genoteerd van het meest naar het minst significante
     * onderdeel. Een voorbeeld: 2022-02-21
     */
    @JsonbProperty("eindDatum")
    protected LocalDate eindDatum;

    public CategorieRelatieForeignKey() {
    }

    @JsonbCreator
    public CategorieRelatieForeignKey(
            @JsonbProperty(value = "url") URI url,
            @JsonbProperty(value = "categorieNaam") String categorieNaam
    ) {
        this.url = url;
        this.categorieNaam = categorieNaam;
    }

    /**
     * Unieke (technische) identificatiecode van de Categorie Relatie.
     * 
     * @return uuid
     **/
    public UUID getUuid() {
        return uuid;
    }

    /**
     * Set uuid
     */
    public void setUuid(UUID uuid) {
        this.uuid = uuid;
    }

    public CategorieRelatieForeignKey uuid(UUID uuid) {
        this.uuid = uuid;
        return this;
    }

    /**
     * De unieke URL van deze categorie binnen deze API.
     * 
     * @return url
     **/
    public URI getUrl() {
        return url;
    }


    /**
     * De naam van de gelinkte categorie.
     * 
     * @return categorieNaam
     **/
    public String getCategorieNaam() {
        return categorieNaam;
    }


    /**
     * Aanduiding van datum volgens de NEN-ISO 8601:2019-standaard. Een datum wordt genoteerd van het meest naar het minst significante
     * onderdeel. Een voorbeeld: 2022-02-21
     * 
     * @return beginDatum
     **/
    public LocalDate getBeginDatum() {
        return beginDatum;
    }

    /**
     * Set beginDatum
     */
    public void setBeginDatum(LocalDate beginDatum) {
        this.beginDatum = beginDatum;
    }

    public CategorieRelatieForeignKey beginDatum(LocalDate beginDatum) {
        this.beginDatum = beginDatum;
        return this;
    }

    /**
     * Aanduiding van datum volgens de NEN-ISO 8601:2019-standaard. Een datum wordt genoteerd van het meest naar het minst significante
     * onderdeel. Een voorbeeld: 2022-02-21
     * 
     * @return eindDatum
     **/
    public LocalDate getEindDatum() {
        return eindDatum;
    }

    /**
     * Set eindDatum
     */
    public void setEindDatum(LocalDate eindDatum) {
        this.eindDatum = eindDatum;
    }

    public CategorieRelatieForeignKey eindDatum(LocalDate eindDatum) {
        this.eindDatum = eindDatum;
        return this;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CategorieRelatieForeignKey categorieRelatieForeignKey = (CategorieRelatieForeignKey) o;
        return Objects.equals(this.uuid, categorieRelatieForeignKey.uuid) &&
               Objects.equals(this.url, categorieRelatieForeignKey.url) &&
               Objects.equals(this.categorieNaam, categorieRelatieForeignKey.categorieNaam) &&
               Objects.equals(this.beginDatum, categorieRelatieForeignKey.beginDatum) &&
               Objects.equals(this.eindDatum, categorieRelatieForeignKey.eindDatum);
    }

    @Override
    public int hashCode() {
        return Objects.hash(uuid, url, categorieNaam, beginDatum, eindDatum);
    }

    /**
     * Create a string representation of this pojo.
     */
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CategorieRelatieForeignKey {\n");

        sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
        sb.append("    url: ").append(toIndentedString(url)).append("\n");
        sb.append("    categorieNaam: ").append(toIndentedString(categorieNaam)).append("\n");
        sb.append("    beginDatum: ").append(toIndentedString(beginDatum)).append("\n");
        sb.append("    eindDatum: ").append(toIndentedString(eindDatum)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private static String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
