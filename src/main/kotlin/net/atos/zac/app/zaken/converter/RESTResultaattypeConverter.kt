/*
 * SPDX-FileCopyrightText: 2022 Atos, 2024 Lifely
 * SPDX-License-Identifier: EUPL-1.2+
 */
package net.atos.zac.app.zaken.converter

import jakarta.inject.Inject
import net.atos.client.zgw.ztc.ZTCClientService
import net.atos.client.zgw.ztc.model.Afleidingswijze
import net.atos.client.zgw.ztc.model.generated.ResultaatType
import net.atos.zac.app.zaken.model.RESTResultaattype
import net.atos.zac.util.PeriodUtil
import net.atos.zac.util.UriUtil
import java.net.URI
import java.time.Period

class RESTResultaattypeConverter {
    @Inject
    private lateinit var ztcClientService: ZTCClientService

    fun convertResultaattype(resultaattype: ResultaatType): RESTResultaattype {
        val afleidingswijze = resultaattype.brondatumArchiefprocedure.afleidingswijze
        return RESTResultaattype(
            id = UriUtil.uuidFromURI(resultaattype.url),
            naam = resultaattype.omschrijving,
            // compare enum values and not the enums themselves because we have multiple functionally
            // identical enums in our Java client code generated by the OpenAPI Generator
            vervaldatumBesluitVerplicht = Afleidingswijze.VERVALDATUM_BESLUIT.toValue() == afleidingswijze.value(),
            besluitVerplicht = Afleidingswijze.VERVALDATUM_BESLUIT.toValue() == afleidingswijze.value() ||
                Afleidingswijze.INGANGSDATUM_BESLUIT.toValue() == afleidingswijze.value(),
            archiefNominatie = resultaattype.archiefnominatie.name,
            toelichting = resultaattype.toelichting,
            naamGeneriek = resultaattype.omschrijvingGeneriek,
            archiefTermijn = PeriodUtil.format(Period.parse(resultaattype.archiefactietermijn))
        )
    }

    fun convertResultaattypeUri(resultaattypeURI: URI) =
        convertResultaattype(ztcClientService.readResultaattype(resultaattypeURI))

    fun convertResultaattypes(resultaattypes: List<ResultaatType>): List<RESTResultaattype> =
        resultaattypes.stream()
            .map { this.convertResultaattype(it) }
            .toList()
}
