/*
 * SPDX-FileCopyrightText: 2022 Atos, 2024 Lifely
 * SPDX-License-Identifier: EUPL-1.2+
 */
package net.atos.zac.app.zaak.converter

import jakarta.inject.Inject
import net.atos.client.zgw.util.extractUuid
import net.atos.client.zgw.ztc.ZtcClientService
import net.atos.client.zgw.ztc.model.Afleidingswijze
import net.atos.client.zgw.ztc.model.generated.ResultaatType
import net.atos.zac.app.zaak.model.RestResultaattype
import net.atos.zac.util.time.PeriodUtil
import java.net.URI
import java.time.Period
import java.util.Locale

class RestResultaattypeConverter @Inject constructor(
    private val ztcClientService: ZtcClientService
) {
    fun convertResultaattype(resultaattype: ResultaatType) =
        RestResultaattype(
            id = resultaattype.url.extractUuid(),
            naam = resultaattype.omschrijving,
            toelichting = resultaattype.toelichting,
            archiefNominatie = resultaattype.archiefnominatie.name,
            archiefTermijn = resultaattype.archiefactietermijn?.let {
                PeriodUtil.format(Period.parse(it))
            },
            besluitVerplicht = resultaattype.brondatumArchiefprocedure?.afleidingswijze?.let {
                Afleidingswijze.VERVALDATUM_BESLUIT.toValue() == it.name.uppercase(Locale.getDefault()) ||
                    Afleidingswijze.INGANGSDATUM_BESLUIT.toValue() == it.name.uppercase(Locale.getDefault())
            } ?: false,
            naamGeneriek = resultaattype.omschrijvingGeneriek,
            // compare enum values and not the enums themselves because we have multiple functionally
            // identical enums in our Java client code generated by the OpenAPI Generator
            vervaldatumBesluitVerplicht = resultaattype.brondatumArchiefprocedure?.afleidingswijze?.let {
                Afleidingswijze.VERVALDATUM_BESLUIT.toValue() == it.name.uppercase(Locale.getDefault())
            } ?: false
        )

    fun convertResultaattypeUri(resultaattypeURI: URI) =
        convertResultaattype(ztcClientService.readResultaattype(resultaattypeURI))

    fun convertResultaattypes(resultaattypes: List<ResultaatType>): List<RestResultaattype> =
        resultaattypes.map { this.convertResultaattype(it) }
}
